# 
msgid ""
msgstr ""
"Project-Id-Version: Apache CouchDB 1.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-21 22:51\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../src/maintenance/performance.rst:18
msgid "Performance"
msgstr ""

#: ../../src/maintenance/performance.rst:20
msgid ""
"With up to tens of thousands of documents you will generally find CouchDB to"
" perform well no matter how you write your code. Once you start getting into"
" the millions of documents you need to be a lot more careful."
msgstr ""

#: ../../src/maintenance/performance.rst:26
msgid "Disk I/O"
msgstr ""

#: ../../src/maintenance/performance.rst:29
msgid "File Size"
msgstr ""

#: ../../src/maintenance/performance.rst:31
msgid ""
"The smaller your file size, the less `I/O` operations there will be, the "
"more of the file can be cached by CouchDB and the operating system, the "
"quicker it is to replicate, backup etc. Consequently you should carefully "
"examine the data you are storing. For example it would be silly to use keys "
"that are hundreds of characters long, but your program would be hard to "
"maintain if you only used single character keys. Carefully consider data "
"that is duplicated by putting it in views."
msgstr ""

#: ../../src/maintenance/performance.rst:41
msgid "Disk and File System Performance"
msgstr ""

#: ../../src/maintenance/performance.rst:43
msgid ""
"Using faster disks, striped RAID arrays and modern file systems can all "
"speed up your CouchDB deployment. However, there is one option that can "
"increase the responsiveness of your CouchDB server when disk performance is "
"a bottleneck. From the Erlang documentation for the file module:"
msgstr ""

#: ../../src/maintenance/performance.rst:48
msgid ""
"On operating systems with thread support, it is possible to let file "
"operations be performed in threads of their own, allowing other Erlang "
"processes to continue executing in parallel with the file operations. See "
"the `command line flag +A in erl(1)`_."
msgstr ""

#: ../../src/maintenance/performance.rst:53
msgid ""
"Setting this argument to a number greater than zero can keep your CouchDB "
"installation responsive even during periods of heavy disk utilization. The "
"easiest way to set this option is through the ``ERL_FLAGS`` environment "
"variable. For example, to give Erlang four threads with which to perform I/O"
" operations add the following to ``(prefix)/etc/defaults/couchdb`` (or "
"equivalent)::"
msgstr ""

#: ../../src/maintenance/performance.rst:67
msgid "System Resource Limits"
msgstr ""

#: ../../src/maintenance/performance.rst:69
msgid ""
"One of the problems that administrators run into as their deployments become"
" large are resource limits imposed by the system and by the application "
"configuration. Raising these limits can allow your deployment to grow beyond"
" what the default configuration will support."
msgstr ""

#: ../../src/maintenance/performance.rst:76
msgid "CouchDB Configuration Options"
msgstr ""

#: ../../src/maintenance/performance.rst:79
msgid "delayed_commits"
msgstr ""

#: ../../src/maintenance/performance.rst:81
msgid ""
"The :config:option:`delayed commits <couchdb/delayed_commits>` allows to "
"achieve better write performance for some workloads while sacrificing a "
"small amount of durability. The setting causes CouchDB to wait up to a full "
"second before committing new data after an update. If the server crashes "
"before the header is written then any writes since the last commit are lost."
" Keep this option enabled on your own risk."
msgstr ""

#: ../../src/maintenance/performance.rst:89
msgid "max_dbs_open"
msgstr ""

#: ../../src/maintenance/performance.rst:91
msgid ""
"In your :ref:`configuration <config>` (local.ini or similar) familiarize "
"yourself with the :config:option:`couchdb/max_dbs_open`:"
msgstr ""

#: ../../src/maintenance/performance.rst:99
msgid ""
"This option places an upper bound on the number of databases that can be "
"open at one time. CouchDB reference counts database accesses internally and "
"will close idle databases when it must. Sometimes it is necessary to keep "
"more than the default open at once, such as in deployments where many "
"databases will be continuously replicating."
msgstr ""

#: ../../src/maintenance/performance.rst:107
msgid "Erlang"
msgstr ""

#: ../../src/maintenance/performance.rst:109
msgid ""
"Even if you've increased the maximum connections CouchDB will allow, the "
"Erlang runtime system will not allow more than 1024 connections by default. "
"Adding the following directive to ``(prefix)/etc/default/couchdb`` (or "
"equivalent) will increase this limit (in this case to 4096)::"
msgstr ""

#: ../../src/maintenance/performance.rst:116
msgid ""
"CouchDB versions up to 1.1.x also create Erlang Term Storage (`ETS`_) tables"
" for each replication. If you are using a version of CouchDB older than 1.2 "
"and must support many replications, also set the ``ERL_MAX_ETS_TABLES`` "
"variable. The default is approximately 1400 tables."
msgstr ""

#: ../../src/maintenance/performance.rst:121
msgid ""
"Note that on Mac OS X, Erlang will not actually increase the file descriptor"
" limit past 1024 (i.e. the system headerâ€“defined value of ``FD_SETSIZE``). "
"See `this tip for a possible workaround`_ and `this thread for a deeper "
"explanation`_."
msgstr ""

#: ../../src/maintenance/performance.rst:132
msgid "PAM and ulimit"
msgstr ""

#: ../../src/maintenance/performance.rst:134
msgid ""
"Finally, most \\*nix operating systems impose various resource limits on "
"every process. If your system is set up to use the Pluggable Authentication "
"Modules (`PAM`_) system, increasing this limit is straightforward. For "
"example, creating a file named ``/etc/security/limits.d/100-couchdb.conf`` "
"with the following contents will ensure that CouchDB can open enough file "
"descriptors to service your increased maximum open databases and Erlang "
"ports::"
msgstr ""

#: ../../src/maintenance/performance.rst:145
msgid ""
"If your system does not use PAM, a `ulimit` command is usually available for"
" use in a custom script to launch CouchDB with increased resource limits. If"
" necessary, feel free to increase this limits as long as your hardware can "
"handle the load."
msgstr ""

#: ../../src/maintenance/performance.rst:154
msgid "Network"
msgstr ""

#: ../../src/maintenance/performance.rst:156
msgid ""
"There is latency overhead making and receiving each request/response. In "
"general you should do your requests in batches. Most APIs have some "
"mechanism to do batches, usually by supplying lists of documents or keys in "
"the request body. Be careful what size you pick for the batches. The larger "
"batch requires more time your client has to spend encoding the items into "
"JSON and more time is spent decoding that number of responses. Do some "
"benchmarking with your own configuration and typical data to find the sweet "
"spot. It is likely to be between one and ten thousand documents."
msgstr ""

#: ../../src/maintenance/performance.rst:165
msgid ""
"If you have a fast I/O system then you can also use concurrency - have "
"multiple requests/responses at the same time. This mitigates the latency "
"involved in assembling JSON, doing the networking and decoding JSON."
msgstr ""

#: ../../src/maintenance/performance.rst:169
msgid ""
"As of CouchDB 1.1.0, users often report lower write performance of documents"
" compared to older releases. The main reason is that this release ships with"
" the more recent version of the HTTP server library Mochiweb, which by "
"default sets the TCP socket option `SO_NODELAY`_ to false. This means that "
"small data sent to the TCP socket, like the reply to a document write "
"request (or reading a very small document), will not be sent immediately to "
"the network - TCP will buffer it for a while hoping that it will be asked to"
" send more data through the same socket and then send all the data at once "
"for increased performance. This TCP buffering behaviour can be disabled via "
":config:option:`httpd/socket_options`:"
msgstr ""

#: ../../src/maintenance/performance.rst:189
msgid ""
"Bulk :ref:`load <api/db/all_docs>` and :ref:`store <api/db/bulk_docs>` API."
msgstr ""

#: ../../src/maintenance/performance.rst:193
msgid "CouchDB"
msgstr ""

#: ../../src/maintenance/performance.rst:196
msgid "DELETE operation"
msgstr ""

#: ../../src/maintenance/performance.rst:198
msgid ""
"When you :method:`DELETE` a document the database will create a new revision"
" which contains the ``_id`` and ``_rev`` fields as well as the `_deleted` "
"flag. This revision will remain even after a `database compaction` so that "
"the deletion can be replicated. Deleted documents, like non-deleted "
"documents, can affect view build times, :method:`PUT` and :method:`DELETE` "
"requests time and size of database on disk, since they increase the size of "
"the B+Tree's. You can see the number of deleted documents in :get:`database "
"information </{db}>`. If your use case creates lots of deleted documents "
"(for example, if you are storing short-term data like logfile entries, "
"message queues, etc), you might want to periodically switch to a new "
"database and delete the old one (once the entries in it have all expired)."
msgstr ""

#: ../../src/maintenance/performance.rst:212
msgid "Document's ID"
msgstr ""

#: ../../src/maintenance/performance.rst:214
msgid ""
"The db file size is derived from your document and view sizes but also on a "
"multiple of your ``_id`` sizes. Not only is the ``_id`` present in the "
"document, but it and parts of it are duplicated in the binary tree structure"
" CouchDB uses to navigate the file to find the document in the first place. "
"As a real world example for one user switching from 16 byte ids to 4 byte "
"ids made a database go from 21GB to 4GB with 10 million documents (the raw "
"JSON text when from 2.5GB to 2GB)."
msgstr ""

#: ../../src/maintenance/performance.rst:222
msgid ""
"Inserting with sequential (and at least sorted) ids is faster than random "
"ids. Consequently you should consider generating ids yourself, allocating "
"them sequentially and using an encoding scheme that consumes fewer bytes. "
"For example, something that takes 16 hex digits to represent can be done in "
"4 base 62 digits (10 numerals, 26 lower case, 26 upper case)."
msgstr ""

#: ../../src/maintenance/performance.rst:230
msgid "Views"
msgstr ""

#: ../../src/maintenance/performance.rst:233
msgid "Views Generation"
msgstr ""

#: ../../src/maintenance/performance.rst:235
msgid ""
"Views with the Javascript query server are extremely slow to generate when "
"there are a non-trivial number of documents to process. The generation "
"process won't even saturate a single CPU let alone your I/O. The cause is "
"the latency involved in the CouchDB server and separate `couchjs` query "
"server, dramatically indicating how important it is to take latency out of "
"your implementation."
msgstr ""

#: ../../src/maintenance/performance.rst:241
msgid ""
"You can let view access be \"stale\" but it isn't practical to determine "
"when that will occur giving you a quick response and when views will be "
"updated which will take a long time. (A 10 million document database took "
"about 10 minutes to load into CouchDB but about 4 hours to do view "
"generation)."
msgstr ""

#: ../../src/maintenance/performance.rst:246
msgid ""
"View information isn't replicated - it is rebuilt on each database so you "
"can't do the view generation on a separate sever."
msgstr ""

#: ../../src/maintenance/performance.rst:251
msgid "Builtin Reduce Functions"
msgstr ""

#: ../../src/maintenance/performance.rst:253
msgid ""
"If youâ€™re using a very simple view function that only performs a sum or "
"count reduction, you can call native Erlang implementations of them by "
"simply writing ``_sum`` or ``_count`` in place of your function declaration."
" This will speed up things dramatically, as it cuts down on IO between "
"CouchDB and the :ref:`JavaScript query server <query-server/js>`. For "
"example, as `mentioned on the mailing list`_, the time for outputting an "
"(already indexed and cached) view with about 78,000 items went down from 60 "
"seconds to 4 seconds."
msgstr ""

#: ../../src/maintenance/performance.rst:261
msgid "Before:"
msgstr ""

#: ../../src/maintenance/performance.rst:275
msgid "After:"
msgstr ""

#: ../../src/maintenance/performance.rst:293
msgid ":ref:`reducefun/builtin`"
msgstr ""
