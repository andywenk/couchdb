# 
msgid ""
msgstr ""
"Project-Id-Version: Apache CouchDB 1.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-21 22:51\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../src/query-server/protocol.rst:18
msgid "Query Server Protocol"
msgstr ""

#: ../../src/query-server/protocol.rst:20
msgid ""
"The `Query Server` is an external process that communicates with CouchDB via"
" a JSON protocol over stdio  and processes all design functions calls: "
"`views`, `shows`, `lists`, `filters`, `updates` and `validate_doc_update`."
msgstr ""

#: ../../src/query-server/protocol.rst:24
msgid ""
"CouchDB communicates with the Query Server process though stdio interface by"
" JSON messages that terminated by newline character. Messages that are sent "
"to the Query Server are always `array`-typed that could be matched by the "
"pattern ``[<command>, <*arguments>]\\n``."
msgstr ""

#: ../../src/query-server/protocol.rst:30
msgid ""
"To simplify examples reading we omitted trailing ``\\n`` character to let "
"Sphinx highlight them well. Also, all examples contain formatted JSON values"
" while real data transfers in compact mode without formatting spaces."
msgstr ""

#: ../../src/query-server/protocol.rst:37
#: ../../src/query-server/protocol.rst:39
msgid "``reset``"
msgstr ""

#: ../../src/query-server/protocol.rst:40
msgid ":ref:`Query server state <config/query_server_config>` (optional)"
msgstr ""

#: ../../src/query-server/protocol.rst:41
#: ../../src/query-server/protocol.rst:73
#: ../../src/query-server/protocol.rst:106
#: ../../src/query-server/protocol.rst:698
#: ../../src/query-server/protocol.rst:810
msgid "``true``"
msgstr ""

#: ../../src/query-server/protocol.rst:43
msgid ""
"This resets the state of the Query Server and makes it forget all previous "
"input. If applicable, this is the point to run garbage collection."
msgstr ""

#: ../../src/query-server/protocol.rst:46
#: ../../src/query-server/protocol.rst:57
#: ../../src/query-server/protocol.rst:78
#: ../../src/query-server/protocol.rst:114
#: ../../src/query-server/protocol.rst:141
#: ../../src/query-server/protocol.rst:165
#: ../../src/query-server/protocol.rst:198
#: ../../src/query-server/protocol.rst:238
#: ../../src/query-server/protocol.rst:598
#: ../../src/query-server/protocol.rst:703
msgid "CouchDB sends::"
msgstr ""

#: ../../src/query-server/protocol.rst:50
#: ../../src/query-server/protocol.rst:61
#: ../../src/query-server/protocol.rst:87
#: ../../src/query-server/protocol.rst:121
#: ../../src/query-server/protocol.rst:177
#: ../../src/query-server/protocol.rst:212
#: ../../src/query-server/protocol.rst:252
#: ../../src/query-server/protocol.rst:311
#: ../../src/query-server/protocol.rst:664
#: ../../src/query-server/protocol.rst:788
#: ../../src/query-server/protocol.rst:865
msgid "The Query Server answers::"
msgstr ""

#: ../../src/query-server/protocol.rst:54
msgid ""
"To set up new Query Server state the second argument is used with object "
"data. This argument is used"
msgstr ""

#: ../../src/query-server/protocol.rst:69
#: ../../src/query-server/protocol.rst:71
msgid "``add_lib``"
msgstr ""

#: ../../src/query-server/protocol.rst:72
msgid "CommonJS library object by ``views/lib`` path"
msgstr ""

#: ../../src/query-server/protocol.rst:75
msgid ""
"Adds :ref:`CommonJS <commonjs>` library to Query Server state for further "
"usage in `map` functions."
msgstr ""

#: ../../src/query-server/protocol.rst:94
msgid ""
"This library shouldn't have any side effects nor track its own state or "
"you'll have a lot of happy debugging time if something went wrong. Remember "
"that a complete index rebuild is a heavy operation and this is the only way "
"to fix your mistakes with shared state."
msgstr ""

#: ../../src/query-server/protocol.rst:102
#: ../../src/query-server/protocol.rst:104
msgid "``add_fun``"
msgstr ""

#: ../../src/query-server/protocol.rst:105
msgid "Map function source code."
msgstr ""

#: ../../src/query-server/protocol.rst:108
msgid ""
"When creating or updating a view the Query Server gets sent the view "
"function for evaluation. The Query Server should parse, compile and evaluate"
" the function it receives to make it callable later. If this fails, the "
"Query Server returns an error. CouchDB might store several functions before "
"sending in any actual documents."
msgstr ""

#: ../../src/query-server/protocol.rst:129
#: ../../src/query-server/protocol.rst:131
msgid "``map_doc``"
msgstr ""

#: ../../src/query-server/protocol.rst:132
msgid "Document object"
msgstr ""

#: ../../src/query-server/protocol.rst:133
msgid "Array of key-value pairs per applied :ref:`function <qs/add_fun>`"
msgstr ""

#: ../../src/query-server/protocol.rst:135
msgid ""
"When the view function is stored in the Query Server, CouchDB starts sending"
" in all the documents in the database, one at a time. The Query Server calls"
" the previously stored functions one after another with a document and "
"stores its result. When all functions have been called, the result is "
"returned as a JSON string."
msgstr ""

#: ../../src/query-server/protocol.rst:153
msgid ""
"If the function above is the only function stored, the Query Server "
"answers::"
msgstr ""

#: ../../src/query-server/protocol.rst:161
msgid ""
"That is, an array with the result for every function for the given document."
msgstr ""

#: ../../src/query-server/protocol.rst:163
msgid ""
"If a document is to be excluded from the view, the array should be empty."
msgstr ""

#: ../../src/query-server/protocol.rst:185
#: ../../src/query-server/protocol.rst:187
msgid "``reduce``"
msgstr ""

#: ../../src/query-server/protocol.rst:189
msgid "Reduce function source"
msgstr ""

#: ../../src/query-server/protocol.rst:190
msgid ""
"Array of :ref:`map function <mapfun>` results where each item represented in"
" format ``[[key, id-of-doc], value]``"
msgstr ""

#: ../../src/query-server/protocol.rst:192
msgid "Array with pair values: ``true`` and another array with reduced result"
msgstr ""

#: ../../src/query-server/protocol.rst:194
msgid ""
"If the view has a reduce function defined, CouchDB will enter into the "
"reduce phase. The view server will receive a list of reduce functions and "
"some map results on which it can apply them."
msgstr ""

#: ../../src/query-server/protocol.rst:219
msgid ""
"Note that even though the view server receives the map results in the form "
"``[[key, id-of-doc], value]``, the function may receive them in a different "
"form. For example, the JavaScript Query Server applies functions on the list"
" of keys and the list of values."
msgstr ""

#: ../../src/query-server/protocol.rst:227
#: ../../src/query-server/protocol.rst:229
msgid "``rereduce``"
msgstr ""

#: ../../src/query-server/protocol.rst:230
msgid "List of values."
msgstr ""

#: ../../src/query-server/protocol.rst:232
msgid ""
"When building a view, CouchDB will apply the reduce step directly to the "
"output of the map step and the rereduce step to the output of a previous "
"reduce step."
msgstr ""

#: ../../src/query-server/protocol.rst:235
msgid ""
"CouchDB will send a list of values, with no keys or document ids, to the "
"rereduce step."
msgstr ""

#: ../../src/query-server/protocol.rst:263
#: ../../src/query-server/protocol.rst:265
#: ../../src/query-server/protocol.rst:335
#: ../../src/query-server/protocol.rst:429
#: ../../src/query-server/protocol.rst:583
#: ../../src/query-server/protocol.rst:689
#: ../../src/query-server/protocol.rst:805
#: ../../src/query-server/protocol.rst:824
msgid "``ddoc``"
msgstr ""

#: ../../src/query-server/protocol.rst:266
msgid "Array of objects."
msgstr ""

#: ../../src/query-server/protocol.rst:268
msgid "First phase (ddoc initialization):"
msgstr ""

#: ../../src/query-server/protocol.rst:270
msgid "``\"new\"``"
msgstr ""

#: ../../src/query-server/protocol.rst:271
#: ../../src/query-server/protocol.rst:276
msgid "Design document ``_id``"
msgstr ""

#: ../../src/query-server/protocol.rst:272
msgid "Design document object"
msgstr ""

#: ../../src/query-server/protocol.rst:274
msgid "Second phase (design function execution):"
msgstr ""

#: ../../src/query-server/protocol.rst:277
msgid "Function path as an array of object keys"
msgstr ""

#: ../../src/query-server/protocol.rst:278
msgid "Array of function arguments"
msgstr ""

#: ../../src/query-server/protocol.rst:282
msgid "First phase (ddoc initialization): ``true``"
msgstr ""

#: ../../src/query-server/protocol.rst:283
msgid ""
"Second phase (design function execution): custom object depending on "
"executed function"
msgstr ""

#: ../../src/query-server/protocol.rst:288
msgid ""
"This command acts in two phases: `ddoc` registration and `design function` "
"execution."
msgstr ""

#: ../../src/query-server/protocol.rst:291
msgid ""
"In the first phase CouchDB sends a full design document content to the Query"
" Server to let it cache it by ``_id`` value for further function execution."
msgstr ""

#: ../../src/query-server/protocol.rst:294
msgid "To do this, CouchDB sends::"
msgstr ""

#: ../../src/query-server/protocol.rst:316
msgid ""
"After than this design document is ready to serve next subcommands - that's "
"the second phase."
msgstr ""

#: ../../src/query-server/protocol.rst:321
msgid ""
"Each ``ddoc`` subcommand is the root design document key, so they are not "
"actually subcommands, but first elements of the JSON path that may be "
"handled and processed."
msgstr ""

#: ../../src/query-server/protocol.rst:325
msgid "The pattern for subcommand execution is common:"
msgstr ""

#: ../../src/query-server/protocol.rst:327
msgid ""
"``[\"ddoc\", <design_doc_id>, [<subcommand>, <funcname>], [<argument1>, "
"<argument2>, ...]]``"
msgstr ""

#: ../../src/query-server/protocol.rst:333
#: ../../src/query-server/protocol.rst:336
msgid "``shows``"
msgstr ""

#: ../../src/query-server/protocol.rst:339
#: ../../src/query-server/protocol.rst:587
msgid ""
"Document object or ``null`` if document `id` wasn't specified in request"
msgstr ""

#: ../../src/query-server/protocol.rst:340
#: ../../src/query-server/protocol.rst:434
#: ../../src/query-server/protocol.rst:588
#: ../../src/query-server/protocol.rst:694
msgid ":ref:`request_object`"
msgstr ""

#: ../../src/query-server/protocol.rst:342
msgid "Array with two elements:"
msgstr ""

#: ../../src/query-server/protocol.rst:344
msgid "``\"resp\"``"
msgstr ""

#: ../../src/query-server/protocol.rst:345
#: ../../src/query-server/protocol.rst:594
msgid ":ref:`response_object`"
msgstr ""

#: ../../src/query-server/protocol.rst:347
msgid "Executes :ref:`show function <showfun>`."
msgstr ""

#: ../../src/query-server/protocol.rst:349
msgid "Couchdb sends::"
msgstr ""

#: ../../src/query-server/protocol.rst:414
msgid "The Query Server sends::"
msgstr ""

#: ../../src/query-server/protocol.rst:427
#: ../../src/query-server/protocol.rst:430
msgid "``lists``"
msgstr ""

#: ../../src/query-server/protocol.rst:433
msgid ":ref:`view_head_info_object`:"
msgstr ""

#: ../../src/query-server/protocol.rst:436
msgid "Array. See below for details."
msgstr ""

#: ../../src/query-server/protocol.rst:438
msgid "Executes :ref:`list function <listfun>`."
msgstr ""

#: ../../src/query-server/protocol.rst:440
msgid ""
"The communication protocol for `list` functions is a bit complex so let's "
"use an example for illustration."
msgstr ""

#: ../../src/query-server/protocol.rst:443
msgid "Let's assume that we have view a function that emits `id-rev` pairs::"
msgstr ""

#: ../../src/query-server/protocol.rst:449
msgid ""
"And we'd like to emulate ``_all_docs`` JSON response with list function. Our"
" *first* version of the list functions looks like this::"
msgstr ""

#: ../../src/query-server/protocol.rst:463
msgid ""
"The whole communication session during list function execution could be "
"divided on three parts:"
msgstr ""

#: ../../src/query-server/protocol.rst:466
msgid "Initialization"
msgstr ""

#: ../../src/query-server/protocol.rst:468
msgid ""
"The first returned object from list function is an array of next structure::"
msgstr ""

#: ../../src/query-server/protocol.rst:472
msgid ""
"Where ``<chunks>`` is an array of text chunks that will be sent to client "
"and ``<headers>`` is an object with response HTTP headers."
msgstr ""

#: ../../src/query-server/protocol.rst:475
msgid ""
"This message is sent from the Query Server to CouchDB on the "
":js:func:`start` call which initialize HTTP response to the client::"
msgstr ""

#: ../../src/query-server/protocol.rst:488
msgid "After this, the list function may start to process view rows."
msgstr ""

#: ../../src/query-server/protocol.rst:490
msgid "View Processing"
msgstr ""

#: ../../src/query-server/protocol.rst:492
msgid ""
"Since view results can be extremely large, it is not wise to pass all its "
"rows in a single command. Instead, CouchDB can send view rows one by one to "
"the Query Server allowing processing view and output generation in a "
"streaming way."
msgstr ""

#: ../../src/query-server/protocol.rst:497
msgid "CouchDB sends a special array that carries view row data::"
msgstr ""

#: ../../src/query-server/protocol.rst:508
msgid ""
"If Query Server has something to return on this, it returns an array with a "
"``\"chunks\"`` item in the head and an array of data in the tail. Now, for "
"our case it has nothing to return, so the response will be::"
msgstr ""

#: ../../src/query-server/protocol.rst:517
msgid ""
"When there is no more view rows to process, CouchDB sends special message, "
"that signs about that there is no more data to send from his side::"
msgstr ""

#: ../../src/query-server/protocol.rst:523
msgid "Finalization"
msgstr ""

#: ../../src/query-server/protocol.rst:525
msgid ""
"The last stage of the communication process is the returning *list tail*: "
"the last data chunk. After this, processing list function will be completed "
"and client will receive complete response."
msgstr ""

#: ../../src/query-server/protocol.rst:529
msgid "For our example the last message will be the next::"
msgstr ""

#: ../../src/query-server/protocol.rst:538
msgid ""
"There, we had made a big mistake: we had returned out result in a single "
"message from the Query Server. That's ok when there are only a few rows in "
"the view result, but it's not acceptable for millions documents and millions"
" view rows"
msgstr ""

#: ../../src/query-server/protocol.rst:543
msgid "Let's fix our list function and see the changes in communication::"
msgstr ""

#: ../../src/query-server/protocol.rst:561
msgid ""
"\"Wait, what?\" - you'd like to ask. Yes, we'd build JSON response manually "
"by string chunks, but let's take a look on logs::"
msgstr ""

#: ../../src/query-server/protocol.rst:573
msgid ""
"Note, that now the Query Server sends response by lightweight chunks and if "
"our communication process was extremely slow, the client will see how "
"response data appears on their screen. Chunk by chunk, without waiting for "
"the complete result, like he have for our previous list function."
msgstr ""

#: ../../src/query-server/protocol.rst:581
#: ../../src/query-server/protocol.rst:584
msgid "``updates``"
msgstr ""

#: ../../src/query-server/protocol.rst:590
msgid "Array with there elements:"
msgstr ""

#: ../../src/query-server/protocol.rst:592
msgid "``\"up\"``"
msgstr ""

#: ../../src/query-server/protocol.rst:593
msgid "Document object or ``null`` if nothing should be stored"
msgstr ""

#: ../../src/query-server/protocol.rst:596
msgid "Executes :ref:`update function <updatefun>`."
msgstr ""

#: ../../src/query-server/protocol.rst:672
msgid "or in case of successful update::"
msgstr ""

#: ../../src/query-server/protocol.rst:687
#: ../../src/query-server/protocol.rst:690
msgid "``filters``"
msgstr ""

#: ../../src/query-server/protocol.rst:693
#: ../../src/query-server/protocol.rst:807
msgid "Array of document objects"
msgstr ""

#: ../../src/query-server/protocol.rst:696
#: ../../src/query-server/protocol.rst:808
msgid "Array of two elements:"
msgstr ""

#: ../../src/query-server/protocol.rst:699
#: ../../src/query-server/protocol.rst:811
msgid "Array of booleans in the same order of input documents."
msgstr ""

#: ../../src/query-server/protocol.rst:701
msgid "Executes :ref:`filter function <filterfun>`."
msgstr ""

#: ../../src/query-server/protocol.rst:803
#: ../../src/query-server/protocol.rst:806
msgid "``views``"
msgstr ""

#: ../../src/query-server/protocol.rst:815
msgid "Executes :ref:`view function <viewfilter>` in place of the filter."
msgstr ""

#: ../../src/query-server/protocol.rst:817
msgid "Acts in the same way as :ref:`qs/ddoc/filters` command."
msgstr ""

#: ../../src/query-server/protocol.rst:822
#: ../../src/query-server/protocol.rst:825
msgid "``validate_doc_update``"
msgstr ""

#: ../../src/query-server/protocol.rst:828
msgid "Document object that will be stored"
msgstr ""

#: ../../src/query-server/protocol.rst:829
msgid "Document object that will be replaced"
msgstr ""

#: ../../src/query-server/protocol.rst:830
msgid ":ref:`userctx_object`"
msgstr ""

#: ../../src/query-server/protocol.rst:831
msgid ":ref:`security_object`"
msgstr ""

#: ../../src/query-server/protocol.rst:833
msgid "``1``"
msgstr ""

#: ../../src/query-server/protocol.rst:835
msgid "Executes :ref:`validation function <vdufun>`."
msgstr ""

#: ../../src/query-server/protocol.rst:837
msgid "CouchDB send::"
msgstr ""

#: ../../src/query-server/protocol.rst:871
msgid ""
"While the only valid response for this command is ``true`` to prevent "
"document save the Query Server need to raise an error: ``forbidden`` or "
"``unauthorized`` - these errors will be turned into correct ``HTTP 403`` and"
" ``HTTP 401`` responses respectively."
msgstr ""

#: ../../src/query-server/protocol.rst:880
msgid "Raising errors"
msgstr ""

#: ../../src/query-server/protocol.rst:882
msgid ""
"When something went wrong the Query Server is able to inform CouchDB about "
"such a situation by sending special message in response of received command."
msgstr ""

#: ../../src/query-server/protocol.rst:885
msgid ""
"Error messages prevent further command execution and return an error "
"description to CouchDB. All errors are logically divided into two groups:"
msgstr ""

#: ../../src/query-server/protocol.rst:888
msgid ""
"`Common errors`. These errors only break the current Query Server command "
"and return the error info to the CouchDB instance *without* terminating the "
"Query Server  process."
msgstr ""

#: ../../src/query-server/protocol.rst:891
msgid ""
"`Fatal errors`. The fatal errors signal about something really bad that "
"hurts the overall Query Server process stability and productivity. For "
"instance, if you're using Python Query Server and some design function is "
"unable to import some third party module, it's better to count such error as"
" fatal and terminate whole process or you still have to do the same after "
"import fixing, but manually."
msgstr ""

#: ../../src/query-server/protocol.rst:901
msgid "``error``"
msgstr ""

#: ../../src/query-server/protocol.rst:903
msgid "To raise an error, the Query Server have to answer::"
msgstr ""

#: ../../src/query-server/protocol.rst:907
msgid ""
"The ``\"error_name\"`` helps to classify problems by their type e.g. if it's"
" ``\"value_error\"`` so probably user have entered wrong data, "
"``\"not_found\"`` notifies about missed resource and ``\"type_error\"`` "
"definitely says about invalid and non expected input from user."
msgstr ""

#: ../../src/query-server/protocol.rst:912
msgid ""
"The ``\"reason why\"`` is the error message that explains why it raised and,"
" if possible, what is needed to do to fix it."
msgstr ""

#: ../../src/query-server/protocol.rst:915
msgid ""
"For example, calling :ref:`updatefun` against non existent document could "
"produce next error message::"
msgstr ""

#: ../../src/query-server/protocol.rst:924
msgid "``forbidden``"
msgstr ""

#: ../../src/query-server/protocol.rst:926
msgid ""
"The `forbidden` error is widely used by :ref:`vdufun` to stop further "
"function processing and prevent on disk store of the new document version. "
"Since this error actually is not an error, but an assertion against user "
"actions, CouchDB doesn't log it at `\"error\"` level, but returns `HTTP 403 "
"Forbidden` response with error information object."
msgstr ""

#: ../../src/query-server/protocol.rst:932
#: ../../src/query-server/protocol.rst:948
msgid "To raise this error, the Query Server have to answer::"
msgstr ""

#: ../../src/query-server/protocol.rst:940
msgid "``unauthorized``"
msgstr ""

#: ../../src/query-server/protocol.rst:942
msgid ""
"The `unauthorized` error mostly acts like `forbidden` one, but with the "
"meaning of *please authorize first*. This small difference helps end users "
"to understand what they can do to solve the problem. CouchDB doesn't log it "
"at `\"error\"` level, but returns `HTTP 401 Unauthorized` response with "
"error information object."
msgstr ""

#: ../../src/query-server/protocol.rst:955
msgid "Logging"
msgstr ""

#: ../../src/query-server/protocol.rst:957
msgid ""
"At any time, the Query Server may send some information that will be saved "
"in CouchDB's log file. This is done by sending a special object with just "
"one field, log, on a separate line::"
msgstr ""

#: ../../src/query-server/protocol.rst:963
msgid "CouchDB responds nothing, but writes received message into log file::"
msgstr ""

#: ../../src/query-server/protocol.rst:967
msgid ""
"These messages are only logged at :config:option:`info level <log/level>`."
msgstr ""
