# 
msgid ""
msgstr ""
"Project-Id-Version: Apache CouchDB 1.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-21 22:51\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../src/api/ddoc/views.rst:17
msgid "``/db/_design/design-doc/_view/view-name``"
msgstr ""

#: ../../src/api/ddoc/views.rst:21
msgid ""
"Executes the specified view function from the specified design document."
msgstr ""

#: ../../src/api/ddoc/views.rst:27 ../../src/api/ddoc/views.rst:66
msgid ":mimetype:`application/json`"
msgstr ""

#: ../../src/api/ddoc/views.rst:28
msgid ":mimetype:`text/plain`"
msgstr ""

#: ../../src/api/ddoc/views.rst:67
msgid ":mimetype:`text/plain; charset=utf-8`"
msgstr ""

#: ../../src/api/ddoc/views.rst:83 ../../src/api/ddoc/views.rst:135
#: ../../src/api/ddoc/views.rst:324 ../../src/api/ddoc/views.rst:452
#: ../../src/api/ddoc/views.rst:655 ../../src/api/ddoc/views.rst:724
msgid "**Request**:"
msgstr ""

#: ../../src/api/ddoc/views.rst:91 ../../src/api/ddoc/views.rst:151
#: ../../src/api/ddoc/views.rst:333 ../../src/api/ddoc/views.rst:461
#: ../../src/api/ddoc/views.rst:663 ../../src/api/ddoc/views.rst:732
msgid "**Response**:"
msgstr ""

#: ../../src/api/ddoc/views.rst:128
msgid ""
"Executes the specified view function from the specified design document. "
"Unlike :get:`/{db}/_design/{ddoc}/_view/{view}` for accessing views, the "
":method:`POST` method supports the specification of explicit keys to be "
"retrieved from the view results. The remainder of the :method:`POST` view "
"functionality is identical to the :get:`/{db}/_design/{ddoc}/_view/{view}` "
"API."
msgstr ""

#: ../../src/api/ddoc/views.rst:184
msgid "View Options"
msgstr ""

#: ../../src/api/ddoc/views.rst:186
msgid ""
"There are two view indexing options that can be defined in a design document"
" as boolean properties of an ``options`` object. Unlike the others querying "
"options, these aren't URL parameters because they take effect when the view "
"index is generated, not when it's accessed:"
msgstr ""

#: ../../src/api/ddoc/views.rst:191
msgid ""
"**local_seq** (*boolean*): Makes documents' local sequence numbers available"
" to map functions (as a ``_local_seq`` document property)"
msgstr ""

#: ../../src/api/ddoc/views.rst:193
msgid ""
"**include_design** (*boolean*): Allows map functions to be called on design "
"documents as well as regular documents"
msgstr ""

#: ../../src/api/ddoc/views.rst:196
msgid ""
"In additional to these options, you may specify :ref:`any other "
"<api/ddoc/view>` with their default value. E.g. having option "
"``\"include_docs\": true`` will automatically includes document body for "
"view results response. You still may override such by explicitly defining "
"same query parameter name with other value."
msgstr ""

#: ../../src/api/ddoc/views.rst:204
msgid "Querying Views and Indexes"
msgstr ""

#: ../../src/api/ddoc/views.rst:206
msgid ""
"The definition of a view within a design document also creates an index "
"based on the key information defined within each view. The production and "
"use of the index significantly increases the speed of access and searching "
"or selecting documents from the view."
msgstr ""

#: ../../src/api/ddoc/views.rst:211
msgid ""
"However, the index is not updated when new documents are added or modified "
"in the database. Instead, the index is generated or updated, either when the"
" view is first accessed, or when the view is accessed after a document has "
"been updated. In each case, the index is updated before the view query is "
"executed against the database."
msgstr ""

#: ../../src/api/ddoc/views.rst:217
msgid "View indexes are updated incrementally in the following situations:"
msgstr ""

#: ../../src/api/ddoc/views.rst:219
msgid "A new document has been added to the database."
msgstr ""

#: ../../src/api/ddoc/views.rst:221
msgid "A document has been deleted from the database."
msgstr ""

#: ../../src/api/ddoc/views.rst:223
msgid "A document in the database has been updated."
msgstr ""

#: ../../src/api/ddoc/views.rst:225
msgid ""
"View indexes are rebuilt entirely when the view definition changes. To "
"achieve this, a 'fingerprint' of the view definition is created when the "
"design document is updated. If the fingerprint changes, then the view "
"indexes are entirely rebuilt. This ensures that changes to the view "
"definitions are reflected in the view indexes."
msgstr ""

#: ../../src/api/ddoc/views.rst:232
msgid ""
"View index rebuilds occur when one view from the same the view group (i.e. "
"all the views defined within a single a design document) has been determined"
" as needing a rebuild. For example, if if you have a design document with "
"different views, and you update the database, all three view indexes within "
"the design document will be updated."
msgstr ""

#: ../../src/api/ddoc/views.rst:238
msgid ""
"Because the view is updated when it has been queried, it can result in a "
"delay in returned information when the view is accessed, especially if there"
" are a large number of documents in the database and the view index does not"
" exist. There are a number of ways to mitigate, but not completely "
"eliminate, these issues. These include:"
msgstr ""

#: ../../src/api/ddoc/views.rst:244
msgid ""
"Create the view definition (and associated design documents) on your "
"database before allowing insertion or updates to the documents. If this is "
"allowed while the view is being accessed, the index can be updated "
"incrementally."
msgstr ""

#: ../../src/api/ddoc/views.rst:249
msgid ""
"Manually force a view request from the database. You can do this either "
"before users are allowed to use the view, or you can access the view "
"manually after documents are added or updated."
msgstr ""

#: ../../src/api/ddoc/views.rst:253
msgid ""
"Use the :ref:`changes feed <api/db/changes>` to monitor for changes to the "
"database and then access the view to force the corresponding view index to "
"be updated."
msgstr ""

#: ../../src/api/ddoc/views.rst:257
msgid ""
"Use a monitor with the :ref:`update notification <update-notifications>` "
"section of the CouchDB configuration file to monitor for changes to your "
"database, and trigger a view query to force the view to be updated."
msgstr ""

#: ../../src/api/ddoc/views.rst:261
msgid ""
"None of these can completely eliminate the need for the indexes to be "
"rebuilt or updated when the view is accessed, but they may lessen the "
"effects on end-users of the index update affecting the user experience."
msgstr ""

#: ../../src/api/ddoc/views.rst:265
msgid ""
"Another alternative is to allow users to access a 'stale' version of the "
"view index, rather than forcing the index to be updated and displaying the "
"updated results. Using a stale view may not return the latest information, "
"but will return the results of the view query using an existing version of "
"the index."
msgstr ""

#: ../../src/api/ddoc/views.rst:271
msgid ""
"For example, to access the existing stale view ``by_recipe`` in the "
"``recipes`` design document:"
msgstr ""

#: ../../src/api/ddoc/views.rst:278
msgid "Accessing a stale view:"
msgstr ""

#: ../../src/api/ddoc/views.rst:280
msgid ""
"Does not trigger a rebuild of the view indexes, even if there have been "
"changes since the last access."
msgstr ""

#: ../../src/api/ddoc/views.rst:283
msgid ""
"Returns the current version of the view index, if a current version exists."
msgstr ""

#: ../../src/api/ddoc/views.rst:286
msgid "Returns an empty result set if the given view index does exist."
msgstr ""

#: ../../src/api/ddoc/views.rst:288
msgid ""
"As an alternative, you use the ``update_after`` value to the ``stale`` "
"parameter. This causes the view to be returned as a stale view, but for the "
"update process to be triggered after the view information has been returned "
"to the client."
msgstr ""

#: ../../src/api/ddoc/views.rst:293
msgid ""
"In addition to using stale views, you can also make use of the "
"``update_seq`` query argument. Using this query argument generates the view "
"information including the update sequence of the database from which the "
"view was generated. The returned value can be compared this to the current "
"update sequence exposed in the database information (returned by "
":get:`/{db}`)."
msgstr ""

#: ../../src/api/ddoc/views.rst:304
msgid "Sorting Returned Rows"
msgstr ""

#: ../../src/api/ddoc/views.rst:306
msgid ""
"Each element within the returned array is sorted using native UTF-8 sorting "
"according to the contents of the key portion of the emitted content. The "
"basic order of output is as follows:"
msgstr ""

#: ../../src/api/ddoc/views.rst:310
msgid "``null``"
msgstr ""

#: ../../src/api/ddoc/views.rst:312
msgid "``false``"
msgstr ""

#: ../../src/api/ddoc/views.rst:314
msgid "``true``"
msgstr ""

#: ../../src/api/ddoc/views.rst:316
msgid "Numbers"
msgstr ""

#: ../../src/api/ddoc/views.rst:318
msgid "Text (case sensitive, lowercase first)"
msgstr ""

#: ../../src/api/ddoc/views.rst:320
msgid "Arrays (according to the values of each element, in order)"
msgstr ""

#: ../../src/api/ddoc/views.rst:322
msgid "Objects (according to the values of keys, in key order)"
msgstr ""

#: ../../src/api/ddoc/views.rst:449
msgid ""
"You can reverse the order of the returned view information by using the "
"``descending`` query value set to true:"
msgstr ""

#: ../../src/api/ddoc/views.rst:578
msgid "Sorting order and startkey/endkey"
msgstr ""

#: ../../src/api/ddoc/views.rst:580
msgid ""
"The sorting direction is applied before the filtering applied using the "
"``startkey`` and ``endkey`` query arguments. For example the following "
"query:"
msgstr ""

#: ../../src/api/ddoc/views.rst:589
msgid ""
"will operate correctly when listing all the matching entries between "
"``carrots`` and ``egg``. If the order of output is reversed with the "
"``descending`` query argument, the view request will return no entries:"
msgstr ""

#: ../../src/api/ddoc/views.rst:606
msgid ""
"The results will be empty because the entries in the view are reversed "
"before the key filter is applied, and therefore the ``endkey`` of “egg” will"
" be seen before the ``startkey`` of “carrots”, resulting in an empty list."
msgstr ""

#: ../../src/api/ddoc/views.rst:611
msgid ""
"Instead, you should reverse the values supplied to the ``startkey`` and "
"``endkey`` parameters to match the descending sorting applied to the keys. "
"Changing the previous example to:"
msgstr ""

#: ../../src/api/ddoc/views.rst:625
msgid "Raw collation"
msgstr ""

#: ../../src/api/ddoc/views.rst:627
msgid ""
"By default CouchDB using `ICU`_ driver for sorting view results. It's "
"possible use binary collation instead for faster view builds where Unicode "
"collation is not important."
msgstr ""

#: ../../src/api/ddoc/views.rst:631
msgid ""
"To use raw collation add ``\"collation\": \"raw\"`` key-value pair to the "
"design documents ``options`` object at the root level. After that, views "
"will be regenerated and new order applied."
msgstr ""

#: ../../src/api/ddoc/views.rst:637
msgid ":ref:`views/collation`"
msgstr ""

#: ../../src/api/ddoc/views.rst:644
msgid "Using Limits and Skipping Rows"
msgstr ""

#: ../../src/api/ddoc/views.rst:646
msgid ""
"By default requestion views result returns all records for it. That's ok "
"when they are small, but this may lead to problems when there are billions "
"of them since the clients might have to read them all and consume all "
"available memory."
msgstr ""

#: ../../src/api/ddoc/views.rst:650
msgid ""
"But it's possible to reduce output result rows by specifying ``limit`` query"
" parameter. For example, retrieving the list of recipes using the "
"``by_title`` view and limited to 5 returns only 5 records, while there are "
"total 2667 records in view:"
msgstr ""

#: ../../src/api/ddoc/views.rst:722
msgid "To omit some records you may use ``skip`` query parameter:"
msgstr ""

#: ../../src/api/ddoc/views.rst:777
msgid ""
"Using ``limit`` and ``skip`` parameters is not recommended for results "
"pagination. Read :ref:`pagination recipe <views/pagination>` why it's so and"
" how to make it better."
msgstr ""
