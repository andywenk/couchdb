# 
msgid ""
msgstr ""
"Project-Id-Version: Apache CouchDB 1.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-21 22:51\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../src/api/server/authn.rst:17
msgid "Authentication"
msgstr ""

#: ../../src/api/server/authn.rst:19
msgid "Interfaces for obtaining session and authorization data."
msgstr ""

#: ../../src/api/server/authn.rst:21
msgid ""
"We're also strongly recommend you to :ref:`setup SSL <config/ssl>` to "
"improve all authentication methods security."
msgstr ""

#: ../../src/api/server/authn.rst:28
msgid "Basic Authentication"
msgstr ""

#: ../../src/api/server/authn.rst:30
msgid ""
"`Basic authentication`_ (:rfc:`2617`) is a quick and simple way to "
"authenticate with CouchDB. The main drawback is the need to send user "
"credentials with each request which may be insecure and could hurt operation"
" performance (since CouchDB must compute password hash with every request):"
msgstr ""

#: ../../src/api/server/authn.rst:35 ../../src/api/server/authn.rst:109
#: ../../src/api/server/authn.rst:153 ../../src/api/server/authn.rst:191
#: ../../src/api/server/authn.rst:239 ../../src/api/server/authn.rst:298
msgid "**Request**:"
msgstr ""

#: ../../src/api/server/authn.rst:44 ../../src/api/server/authn.rst:136
#: ../../src/api/server/authn.rst:164 ../../src/api/server/authn.rst:200
#: ../../src/api/server/authn.rst:248 ../../src/api/server/authn.rst:309
msgid "**Response**:"
msgstr ""

#: ../../src/api/server/authn.rst:71
msgid "Cookie Authentication"
msgstr ""

#: ../../src/api/server/authn.rst:73
msgid ""
"For cookie authentication (:rfc:`2109`) CouchDB generates a token that the "
"client can use for the next few requests to CouchDB. Tokens are valid until "
"a timeout. When CouchDB sees a valid token in a subsequent request, it will "
"authenticate user by this token without requesting the password again. By "
"default, cookies are valid for 10 minutes, but it's "
":config:option:`adjustable <couch_httpd_auth/timeout>`. Also it's possible "
"to make cookies :config:option:`persistent "
"<couch_httpd_auth/allow_persistent_cookies>`"
msgstr ""

#: ../../src/api/server/authn.rst:81
msgid ""
"To obtain the first token and thus authenticate a user for the first time, "
"the `username` and `password` must be sent to the :ref:`_session API "
"<api/auth/session>`."
msgstr ""

#: ../../src/api/server/authn.rst:88
msgid "``/_session``"
msgstr ""

#: ../../src/api/server/authn.rst:92
msgid ""
"Initiates new session for specified user credentials by providing `Cookie` "
"value."
msgstr ""

#: ../../src/api/server/authn.rst:95
msgid ":mimetype:`application/x-www-form-urlencoded`"
msgstr ""

#: ../../src/api/server/authn.rst:96
msgid ":mimetype:`application/json`"
msgstr ""

#: ../../src/api/server/authn.rst:121
msgid "It's also possible to send data as JSON:"
msgstr ""

#: ../../src/api/server/authn.rst:150
msgid ""
"If ``next`` query parameter was provided the response will trigger "
"redirection to the specified location in case of successful authentication:"
msgstr ""

#: ../../src/api/server/authn.rst:182
msgid ""
"Returns complete information about authenticated user. This information "
"contains :ref:`userctx_object`, authentication method and available ones and"
" authentication database."
msgstr ""

#: ../../src/api/server/authn.rst:234
msgid "Closes user's session."
msgstr ""

#: ../../src/api/server/authn.rst:268
msgid "Proxy Authentication"
msgstr ""

#: ../../src/api/server/authn.rst:271
msgid ""
"To use this authentication method make sure that the ``{couch_httpd_auth, "
"proxy_authentication_handler}`` value in added to the list of the active "
":config:option:`httpd/authentication_handlers`:"
msgstr ""

#: ../../src/api/server/authn.rst:281
msgid ""
"`Proxy authentication` is very useful in case your application already uses "
"some external authentication service and you don't want to duplicate users "
"and their roles in CouchDB."
msgstr ""

#: ../../src/api/server/authn.rst:285
msgid ""
"This authentication method allows creation of a :ref:`userctx_object` for "
"remotely authenticated user. By default, the client just need to pass "
"specific headers to CouchDB with related request:"
msgstr ""

#: ../../src/api/server/authn.rst:289
msgid ""
":config:option:`X-Auth-CouchDB-UserName <couch_httpd_auth/x_auth_username>`:"
" username;"
msgstr ""

#: ../../src/api/server/authn.rst:291
msgid ""
":config:option:`X-Auth-CouchDB-Roles <couch_httpd_auth/x_auth_roles>`: list "
"of user roles separated by a comma (``,``);"
msgstr ""

#: ../../src/api/server/authn.rst:293
msgid ""
":config:option:`X-Auth-CouchDB-Token <couch_httpd_auth/x_auth_token>`: "
"authentication token. Optional, but strongly recommended to "
":config:option:`force token be required <couch_httpd_auth/proxy_use_secret>`"
" to prevent requests from untrusted sources."
msgstr ""

#: ../../src/api/server/authn.rst:342
msgid ""
"Note that you don't need to request :ref:`session <api/auth/session>` to be "
"authenticated by this method if all required HTTP headers are provided."
msgstr ""

#: ../../src/api/server/authn.rst:349
msgid "OAuth Authentication"
msgstr ""

#: ../../src/api/server/authn.rst:351
msgid ""
"CouchDB supports OAuth 1.0 authentication (:rfc:`5849`). OAuth provides a "
"method for clients to access server resources  without sharing real "
"credentials (username and password)."
msgstr ""

#: ../../src/api/server/authn.rst:355
msgid ""
"First, :ref:`configure oauth <config/oauth>`, by setting consumer and token "
"with their secrets and binding token to real CouchDB username."
msgstr ""

#: ../../src/api/server/authn.rst:358
msgid ""
"Probably, it's not good idea to work with plain curl, let use some scripting"
" language like Python:"
msgstr ""

#: ../../src/api/server/authn.rst:392
msgid "or Ruby:"
msgstr ""

#: ../../src/api/server/authn.rst:415
msgid "Both snippets produces similar request and response pair:"
msgstr ""

#: ../../src/api/server/authn.rst:447
msgid ""
"There we request the :ref:`_session <api/auth/session>` resource to ensure "
"that authentication was successful and the target CouchDB username is "
"correct. Change the target URL to request required resource."
msgstr ""
