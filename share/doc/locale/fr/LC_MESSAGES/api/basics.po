# 
msgid ""
msgstr ""
"Project-Id-Version: Apache CouchDB 1.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-21 22:51\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../src/api/basics.rst:17
msgid "API Basics"
msgstr ""

#: ../../src/api/basics.rst:19
msgid ""
"The CouchDB API is the primary method of interfacing to a CouchDB instance. "
"Requests are made using HTTP and requests are used to request information "
"from the database, store new data, and perform views and formatting of the "
"information stored within the documents."
msgstr ""

#: ../../src/api/basics.rst:24
msgid ""
"Requests to the API can be categorised by the different areas of the CouchDB"
" system that you are accessing, and the HTTP method used to send the "
"request. Different methods imply different operations, for example retrieval"
" of information from the database is typically handled by the ``GET`` "
"operation, while updates are handled by either a ``POST`` or ``PUT`` "
"request. There are some differences between the information that must be "
"supplied for the different methods. For a guide to the basic HTTP methods "
"and request structure, see :ref:`api/format`."
msgstr ""

#: ../../src/api/basics.rst:33
msgid ""
"For nearly all operations, the submitted data, and the returned data "
"structure, is defined within a JavaScript Object Notation (JSON) object. "
"Basic information on the content and data types for JSON are provided in "
":ref:`json`."
msgstr ""

#: ../../src/api/basics.rst:38
msgid ""
"Errors when accessing the CouchDB API are reported using standard HTTP "
"Status Codes. A guide to the generic codes returned by CouchDB are provided "
"in :ref:`errors`."
msgstr ""

#: ../../src/api/basics.rst:42
msgid ""
"When accessing specific areas of the CouchDB API, specific information and "
"examples on the HTTP methods and request, JSON structures, and error codes "
"are provided."
msgstr ""

#: ../../src/api/basics.rst:49
msgid "Request Format and Responses"
msgstr ""

#: ../../src/api/basics.rst:51
msgid "CouchDB supports the following HTTP request methods:"
msgstr ""

#: ../../src/api/basics.rst:53
msgid "``GET``"
msgstr ""

#: ../../src/api/basics.rst:55
msgid ""
"Request the specified item. As with normal HTTP requests, the format of the "
"URL defines what is returned. With CouchDB this can include static items, "
"database documents, and configuration and statistical information. In most "
"cases the information is returned in the form of a JSON document."
msgstr ""

#: ../../src/api/basics.rst:61
msgid "``HEAD``"
msgstr ""

#: ../../src/api/basics.rst:63
msgid ""
"The ``HEAD`` method is used to get the HTTP header of a ``GET`` request "
"without the body of the response."
msgstr ""

#: ../../src/api/basics.rst:66
msgid "``POST``"
msgstr ""

#: ../../src/api/basics.rst:68
msgid ""
"Upload data. Within CouchDB ``POST`` is used to set values, including "
"uploading documents, setting document values, and starting certain "
"administration commands."
msgstr ""

#: ../../src/api/basics.rst:72
msgid "``PUT``"
msgstr ""

#: ../../src/api/basics.rst:74
msgid ""
"Used to put a specified resource. In CouchDB ``PUT`` is used to create new "
"objects, including databases, documents, views and design documents."
msgstr ""

#: ../../src/api/basics.rst:78
msgid "``DELETE``"
msgstr ""

#: ../../src/api/basics.rst:80
msgid ""
"Deletes the specified resource, including documents, views, and design "
"documents."
msgstr ""

#: ../../src/api/basics.rst:83
msgid "``COPY``"
msgstr ""

#: ../../src/api/basics.rst:85
msgid "A special method that can be used to copy documents and objects."
msgstr ""

#: ../../src/api/basics.rst:87
msgid ""
"If you use the an unsupported HTTP request type with a URL that does not "
"support the specified type, a 405 error will be returned, listing the "
"supported HTTP methods. For example:"
msgstr ""

#: ../../src/api/basics.rst:99
msgid ""
"The CouchDB design document API and the functions when returning HTML (for "
"example as part of a show or list) enables you to include custom HTTP "
"headers through the ``headers`` block of the return object."
msgstr ""

#: ../../src/api/basics.rst:104
msgid "HTTP Headers"
msgstr ""

#: ../../src/api/basics.rst:106
msgid ""
"Because CouchDB uses HTTP for all communication, you need to ensure that the"
" correct HTTP headers are supplied (and processed on retrieval) so that you "
"get the right format and encoding. Different environments and clients will "
"be more or less strict on the effect of these HTTP headers (especially when "
"not present). Where possible you should be as specific as possible."
msgstr ""

#: ../../src/api/basics.rst:114
msgid "Request Headers"
msgstr ""

#: ../../src/api/basics.rst:116 ../../src/api/basics.rst:199
msgid "``Content-type``"
msgstr ""

#: ../../src/api/basics.rst:118
msgid ""
"Specifies the content type of the information being supplied within the "
"request. The specification uses MIME type specifications. For the majority "
"of requests this will be JSON (``application/json``). For some settings the "
"MIME type will be plain text. When uploading attachments it should be the "
"corresponding MIME type for the attachment or binary (``application/octet-"
"stream``)."
msgstr ""

#: ../../src/api/basics.rst:125
msgid "The use of the ``Content-type`` on a request is highly recommended."
msgstr ""

#: ../../src/api/basics.rst:127
msgid "``Accept``"
msgstr ""

#: ../../src/api/basics.rst:129
msgid ""
"Specifies the list of accepted data types to be returned by the server (i.e."
" that are accepted/understandable by the client). The format should be a "
"list of one or more MIME types, separated by colons."
msgstr ""

#: ../../src/api/basics.rst:134
msgid ""
"For the majority of requests the definition should be for JSON data "
"(``application/json``). For attachments you can either specify the MIME type"
" explicitly, or use ``*/*`` to specify that all file types are supported. If"
" the ``Accept`` header is not supplied, then the ``*/*`` MIME type is "
"assumed (i.e. client accepts all formats)."
msgstr ""

#: ../../src/api/basics.rst:140
msgid ""
"The use of ``Accept`` in queries for CouchDB is not required, but is highly "
"recommended as it helps to ensure that the data returned can be processed by"
" the client."
msgstr ""

#: ../../src/api/basics.rst:144
msgid ""
"If you specify a data type using the ``Accept`` header, CouchDB will honor "
"the specified type in the ``Content-type`` header field returned. For "
"example, if you explicitly request ``application/json`` in the ``Accept`` of"
" a request, the returned HTTP headers will use the value in the returned "
"``Content-type`` field."
msgstr ""

#: ../../src/api/basics.rst:150
msgid ""
"For example, when sending a request without an explicit ``Accept`` header, "
"or when specifying ``*/*``:"
msgstr ""

#: ../../src/api/basics.rst:159
msgid "The returned headers are:"
msgstr ""

#: ../../src/api/basics.rst:169
msgid ""
"Note that the returned content type is ``text/plain`` even though the "
"information returned by the request is in JSON format."
msgstr ""

#: ../../src/api/basics.rst:172
msgid "Explicitly specifying the ``Accept`` header:"
msgstr ""

#: ../../src/api/basics.rst:180
msgid "The headers returned include the ``application/json`` content type:"
msgstr ""

#: ../../src/api/basics.rst:191
msgid "Response Headers"
msgstr ""

#: ../../src/api/basics.rst:193
msgid ""
"Response headers are returned by the server when sending back content and "
"include a number of different header fields, many of which are standard HTTP"
" response header and have no significance to CouchDB operation. The list of "
"response headers important to CouchDB are listed below."
msgstr ""

#: ../../src/api/basics.rst:201
msgid ""
"Specifies the MIME type of the returned data. For most request, the returned"
" MIME type is ``text/plain``. All text is encoded in Unicode (UTF-8), and "
"this is explicitly stated in the returned ``Content-type``, as "
"``text/plain;charset=utf-8``."
msgstr ""

#: ../../src/api/basics.rst:206
msgid "``Cache-control``"
msgstr ""

#: ../../src/api/basics.rst:208
msgid ""
"The cache control HTTP response header provides a suggestion for client "
"caching mechanisms on how to treat the returned information. CouchDB "
"typically returns the ``must-revalidate``, which indicates that the "
"information should be revalidated if possible. This is used to ensure that "
"the dynamic nature of the content is correctly updated."
msgstr ""

#: ../../src/api/basics.rst:215
msgid "``Content-length``"
msgstr ""

#: ../../src/api/basics.rst:217
msgid "The length (in bytes) of the returned content."
msgstr ""

#: ../../src/api/basics.rst:219
msgid "``Etag``"
msgstr ""

#: ../../src/api/basics.rst:221
msgid ""
"The ``Etag`` HTTP header field is used to show the revision for a document, "
"or a view."
msgstr ""

#: ../../src/api/basics.rst:224
msgid ""
"ETags have been assigned to a map/reduce group (the collection of views in a"
" single design document). Any change to any of the indexes for those views "
"would generate a new ETag for all view URLs in a single design doc, even if "
"that specific view's results had not changed."
msgstr ""

#: ../../src/api/basics.rst:230
msgid ""
"Each ``_view`` URL has its own ETag which only gets updated when changes are"
" made to the database that effect that index. If the index for that specific"
" view does not change, that view keeps the original ETag head (therefore "
"sending back 304 Not Modified more often)."
msgstr ""

#: ../../src/api/basics.rst:239
msgid "JSON Basics"
msgstr ""

#: ../../src/api/basics.rst:241
msgid ""
"The majority of requests and responses to CouchDB use the JavaScript Object "
"Notation (JSON) for formatting the content and structure of the data and "
"responses."
msgstr ""

#: ../../src/api/basics.rst:245
msgid ""
"JSON is used because it is the simplest and easiest to use solution for "
"working with data within a web browser, as JSON structures can be evaluated "
"and used as JavaScript objects within the web browser environment. JSON also"
" integrates with the server-side JavaScript used within CouchDB."
msgstr ""

#: ../../src/api/basics.rst:251
msgid ""
"JSON supports the same basic types as supported by JavaScript, these are:"
msgstr ""

#: ../../src/api/basics.rst:254
msgid "Number (either integer or floating-point)."
msgstr ""

#: ../../src/api/basics.rst:256
msgid ""
"String; this should be enclosed by double-quotes and supports Unicode "
"characters and backslash escaping. For example:"
msgstr ""

#: ../../src/api/basics.rst:263
msgid ""
"Boolean - a ``true`` or ``false`` value. You can use these strings directly."
" For example:"
msgstr ""

#: ../../src/api/basics.rst:270
msgid "Array - a list of values enclosed in square brackets. For example:"
msgstr ""

#: ../../src/api/basics.rst:276
msgid ""
"Object - a set of key/value pairs (i.e. an associative array, or hash). The "
"key must be a string, but the value can be any of the supported JSON values."
" For example:"
msgstr ""

#: ../../src/api/basics.rst:290
msgid ""
"In CouchDB, the JSON object is used to represent a variety of structures, "
"including the main CouchDB document."
msgstr ""

#: ../../src/api/basics.rst:293
msgid ""
"Parsing JSON into a JavaScript object is supported through the "
"``JSON.parse()`` function in JavaScript, or through various libraries that "
"will perform the parsing of the content into a JavaScript object for you. "
"Libraries for parsing and generating JSON are available in many languages, "
"including Perl, Python, Ruby, Erlang and others."
msgstr ""

#: ../../src/api/basics.rst:300
msgid ""
"Care should be taken to ensure that your JSON structures are valid, invalid "
"structures will cause CouchDB to return an HTTP status code of 500 (server "
"error)."
msgstr ""

#: ../../src/api/basics.rst:308
msgid "Number Handling"
msgstr ""

#: ../../src/api/basics.rst:310
msgid ""
"Developers and users new to computer handling of numbers often encounter "
"suprises when expecting that a number stored in JSON format does not "
"necessarily return as the same number as compared character by character."
msgstr ""

#: ../../src/api/basics.rst:314
msgid ""
"Any numbers defined in JSON that contain a decimal point or exponent will be"
" passed through the Erlang VM's idea of the \"double\" data type. Any "
"numbers that are used in views will pass through the view server's idea of a"
" number (the common JavaScript case means even integers pass through a "
"double due to JavaScript's definition of a number)."
msgstr ""

#: ../../src/api/basics.rst:320
msgid "Consider this document that we write to CouchDB:"
msgstr ""

#: ../../src/api/basics.rst:329
msgid "Now let’s read that document back from CouchDB:"
msgstr ""

#: ../../src/api/basics.rst:340
msgid ""
"What happens is CouchDB is changing the textual representation of the result"
" of decoding what it was given into some numerical format. In most cases "
"this is an `IEEE 754`_ double precision floating point number which is "
"exactly what almost all other languages use as well."
msgstr ""

#: ../../src/api/basics.rst:347
msgid ""
"What Erlang does a bit differently than other languages is that it does not "
"attempt to pretty print the resulting output to use the shortest number of "
"characters. For instance, this is why we have this relationship:"
msgstr ""

#: ../../src/api/basics.rst:357
msgid ""
"What can be confusing here is that internally those two formats decode into "
"the same IEEE-754 representation. And more importantly, it will decode into "
"a fairly close representation when passed through all major parsers that we "
"know about."
msgstr ""

#: ../../src/api/basics.rst:362
msgid ""
"While we've only been discussing cases where the textual representation "
"changes, another important case is when an input value contains more "
"precision than can actually represented in a double. (You could argue that "
"this case is actually \"losing\" data if you don't accept that numbers are "
"stored in doubles)."
msgstr ""

#: ../../src/api/basics.rst:368
msgid ""
"Here's a log for a couple of the more common JSON libraries that happen to "
"be on the author's machine:"
msgstr ""

#: ../../src/api/basics.rst:371
msgid "Spidermonkey::"
msgstr ""

#: ../../src/api/basics.rst:382
msgid "Node::"
msgstr ""

#: ../../src/api/basics.rst:394
msgid "Python::"
msgstr ""

#: ../../src/api/basics.rst:407
msgid "Ruby::"
msgstr ""

#: ../../src/api/basics.rst:421
msgid ""
"A small aside on Ruby, it requires a top level object or array, so I just "
"wrapped the value. Should be obvious it doesn't affect the result of parsing"
" the number though."
msgstr ""

#: ../../src/api/basics.rst:426
msgid "Ejson (CouchDB's current parser) at CouchDB sha 168a663b::"
msgstr ""

#: ../../src/api/basics.rst:441
msgid ""
"As you can see they all pretty much behave the same except for Ruby actually"
" does appear to be losing some precision over the other libraries."
msgstr ""

#: ../../src/api/basics.rst:445
msgid ""
"The astute observer will notice that ejson (the CouchDB JSON library) "
"reported an extra three digits. While its tempting to think that this is due"
" to some internal difference, its just a more specific case of the 1.1 input"
" as described above."
msgstr ""

#: ../../src/api/basics.rst:450
msgid ""
"The important point to realize here is that a double can only hold a finite "
"number of values. What we're doing here is generating a string that when "
"passed through the \"standard\" floating point parsing algorithms (ie, "
"``strtod``) will result in the same bit pattern in memory as we started "
"with. Or, slightly different, the bytes in a JSON serialized number are "
"chosen such that they refer to a single specific value that a double can "
"represent."
msgstr ""

#: ../../src/api/basics.rst:458
msgid ""
"The important point to understand is that we're mapping from one infinite "
"set onto a finite set. An easy way to see this is by reflecting on this::"
msgstr ""

#: ../../src/api/basics.rst:464
msgid ""
"Obviously a computer can't hold infinite bytes so we have to decimate our "
"infinitely sized set to a finite set that can be represented concisely."
msgstr ""

#: ../../src/api/basics.rst:468
msgid "The game that other JSON libraries are playing is merely:"
msgstr ""

#: ../../src/api/basics.rst:470
msgid ""
"\"How few characters do I have to use to select this specific value for a "
"double\""
msgstr ""

#: ../../src/api/basics.rst:472
msgid ""
"And that game has lots and lots of subtle details that are difficult to "
"duplicate in C without a significant amount of effort (it took Python over a"
" year to get it sorted with their fancy build systems that automatically run"
" on a number of different architectures)."
msgstr ""

#: ../../src/api/basics.rst:477
msgid ""
"Hopefully we've shown that CouchDB is not doing anything \"funky\" by "
"changing input. Its behaving the same as any other common JSON library does,"
" its just not pretty printing its output."
msgstr ""

#: ../../src/api/basics.rst:481
msgid ""
"On the other hand, if you actually are in a position where an IEEE-754 "
"double is not a satisfactory datatype for your numbers, then the answer as "
"has been stated is to not pass your numbers through this representation. In "
"JSON this is accomplished by encoding them as a string or by using integer "
"types (although integer types can still bite you if you use a platform that "
"has a different integer representation than normal, ie, JavaScript)."
msgstr ""

#: ../../src/api/basics.rst:489
msgid ""
"Further information can be found easily, including the `Floating Point "
"Guide`_, and  `David Goldberg's Reference`_."
msgstr ""

#: ../../src/api/basics.rst:495
msgid ""
"Also, if anyone is really interested in changing this behavior, we're all "
"ears for contributions to `jiffy`_ (which is theoretically going to replace "
"ejson when we get around to updating the build system). The places we've "
"looked for inspiration are TCL and Python. If you know a decent "
"implementation of this float printing algorithm give us a holler."
msgstr ""

#: ../../src/api/basics.rst:507
msgid "HTTP Status Codes"
msgstr ""

#: ../../src/api/basics.rst:509
msgid ""
"With the interface to CouchDB working through HTTP, error codes and statuses"
" are reported using a combination of the HTTP status code number, and "
"corresponding data in the body of the response data."
msgstr ""

#: ../../src/api/basics.rst:513
msgid ""
"A list of the error codes returned by CouchDB, and generic descriptions of "
"the related errors are provided below. The meaning of different status codes"
" for specific request types are provided in the corresponding API call "
"reference."
msgstr ""

#: ../../src/api/basics.rst:518
msgid "``200 - OK``"
msgstr ""

#: ../../src/api/basics.rst:520
msgid "Request completed successfully."
msgstr ""

#: ../../src/api/basics.rst:522
msgid "``201 - Created``"
msgstr ""

#: ../../src/api/basics.rst:524
msgid "Document created successfully."
msgstr ""

#: ../../src/api/basics.rst:526
msgid "``202 - Accepted``"
msgstr ""

#: ../../src/api/basics.rst:528
msgid ""
"Request has been accepted, but the corresponding operation may not have "
"completed. This is used for background operations, such as database "
"compaction."
msgstr ""

#: ../../src/api/basics.rst:532
msgid "``304 - Not Modified``"
msgstr ""

#: ../../src/api/basics.rst:534
msgid ""
"The additional content requested has not been modified. This is used with "
"the ETag system to identify the version of information returned."
msgstr ""

#: ../../src/api/basics.rst:537
msgid "``400 - Bad Request``"
msgstr ""

#: ../../src/api/basics.rst:539
msgid ""
"Bad request structure. The error can indicate an error with the request URL,"
" path or headers. Differences in the supplied MD5 hash and content also "
"trigger this error, as this may indicate message corruption."
msgstr ""

#: ../../src/api/basics.rst:544
msgid "``401 - Unauthorized``"
msgstr ""

#: ../../src/api/basics.rst:546
msgid ""
"The item requested was not available using the supplied authorization, or "
"authorization was not supplied."
msgstr ""

#: ../../src/api/basics.rst:549
msgid "``403 - Forbidden``"
msgstr ""

#: ../../src/api/basics.rst:551
msgid "The requested item or operation is forbidden."
msgstr ""

#: ../../src/api/basics.rst:553
msgid "``404 - Not Found``"
msgstr ""

#: ../../src/api/basics.rst:555
msgid ""
"The requested content could not be found. The content will include further "
"information, as a JSON object, if available. The structure will contain two "
"keys, ``error`` and ``reason``. For example:"
msgstr ""

#: ../../src/api/basics.rst:563
msgid "``405 - Resource Not Allowed``"
msgstr ""

#: ../../src/api/basics.rst:565
msgid ""
"A request was made using an invalid HTTP request type for the URL requested."
" For example, you have requested a ``PUT`` when a ``POST`` is required. "
"Errors of this type can also triggered by invalid URL strings."
msgstr ""

#: ../../src/api/basics.rst:570
msgid "``406 - Not Acceptable``"
msgstr ""

#: ../../src/api/basics.rst:572
msgid "The requested content type is not supported by the server."
msgstr ""

#: ../../src/api/basics.rst:574
msgid "``409 - Conflict``"
msgstr ""

#: ../../src/api/basics.rst:576
msgid "Request resulted in an update conflict."
msgstr ""

#: ../../src/api/basics.rst:578
msgid "``412 - Precondition Failed``"
msgstr ""

#: ../../src/api/basics.rst:580
msgid ""
"The request headers from the client and the capabilities of the server do "
"not match."
msgstr ""

#: ../../src/api/basics.rst:583
msgid "``415 - Bad Content Type``"
msgstr ""

#: ../../src/api/basics.rst:585
msgid ""
"The content types supported, and the content type of the information being "
"requested or submitted indicate that the content type is not supported."
msgstr ""

#: ../../src/api/basics.rst:589
msgid "``416 - Requested Range Not Satisfiable``"
msgstr ""

#: ../../src/api/basics.rst:591
msgid ""
"The range specified in the request header cannot be satisfied by the server."
msgstr ""

#: ../../src/api/basics.rst:594
msgid "``417 - Expectation Failed``"
msgstr ""

#: ../../src/api/basics.rst:596
msgid "When sending documents in bulk, the bulk load operation failed."
msgstr ""

#: ../../src/api/basics.rst:598
msgid "``500 - Internal Server Error``"
msgstr ""

#: ../../src/api/basics.rst:600
msgid ""
"The request was invalid, either because the supplied JSON was invalid, or "
"invalid information was supplied as part of the request."
msgstr ""
