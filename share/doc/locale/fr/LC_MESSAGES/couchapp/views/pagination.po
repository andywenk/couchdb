# 
msgid ""
msgstr ""
"Project-Id-Version: Apache CouchDB 1.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-21 22:51\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../src/couchapp/views/pagination.rst:18
msgid "Pagination Recipe"
msgstr ""

#: ../../src/couchapp/views/pagination.rst:20
msgid ""
"This recipe explains how to paginate over view results. Pagination is a user"
" interface (UI) pattern that allows the display of a large number of rows "
"(`the result set`) without loading all the rows into the UI at once. A "
"fixed-size subset, the `page`, is displayed along with next and previous "
"links or buttons that can move the `viewport` over the result set to an "
"adjacent page."
msgstr ""

#: ../../src/couchapp/views/pagination.rst:27
msgid ""
"We assume you’re familiar with creating and querying documents and views as "
"well as the multiple view query options."
msgstr ""

#: ../../src/couchapp/views/pagination.rst:31
msgid "Example Data"
msgstr ""

#: ../../src/couchapp/views/pagination.rst:33
msgid ""
"To have some data to work with, we’ll create a list of bands, one document "
"per band::"
msgstr ""

#: ../../src/couchapp/views/pagination.rst:59
msgid "A View"
msgstr ""

#: ../../src/couchapp/views/pagination.rst:61
msgid ""
"We need a simple map function that gives us an alphabetical list of band "
"names. This should be easy, but we’re adding extra smarts to filter out "
"“The” and “A” in front of band names to put them into the right position:"
msgstr ""

#: ../../src/couchapp/views/pagination.rst:74
msgid ""
"The views result is an alphabetical list of band names. Now say we want to "
"display band names five at a time and have a link pointing to the next five "
"names that make up one page, and a link for the previous five, if we’re not "
"on the first page."
msgstr ""

#: ../../src/couchapp/views/pagination.rst:79
msgid ""
"We learned how to use the ``startkey``, ``limit``, and ``skip`` parameters "
"in earlier chapters. We’ll use these again here. First, let’s have a look at"
" the full result set:"
msgstr ""

#: ../../src/couchapp/views/pagination.rst:100
msgid "Setup"
msgstr ""

#: ../../src/couchapp/views/pagination.rst:102
msgid "The mechanics of paging are very simple:"
msgstr ""

#: ../../src/couchapp/views/pagination.rst:104
msgid "Display first page"
msgstr ""

#: ../../src/couchapp/views/pagination.rst:105
#: ../../src/couchapp/views/pagination.rst:108
msgid "If there are more rows to show, show next link"
msgstr ""

#: ../../src/couchapp/views/pagination.rst:106
msgid "Draw subsequent page"
msgstr ""

#: ../../src/couchapp/views/pagination.rst:107
msgid "If this is not the first page, show a previous link"
msgstr ""

#: ../../src/couchapp/views/pagination.rst:110
msgid "Or in a pseudo-JavaScript snippet:"
msgstr ""

#: ../../src/couchapp/views/pagination.rst:129
msgid "Slow Paging (Do Not Use)"
msgstr ""

#: ../../src/couchapp/views/pagination.rst:131
msgid ""
"**Don’t use this method!** We just show it because it might seem natural to "
"use, and you need to know why it is a bad idea. To get the first five rows "
"from the view result, you use the ``?limit=5`` query parameter::"
msgstr ""

#: ../../src/couchapp/views/pagination.rst:137
#: ../../src/couchapp/views/pagination.rst:167
msgid "The result:"
msgstr ""

#: ../../src/couchapp/views/pagination.rst:149
msgid ""
"By comparing the ``total_rows`` value to our ``limit`` value, we can "
"determine if there are more pages to display. We also know by the `offset` "
"member that we are on the first page. We can calculate the value for "
"``skip=`` to get the results for the next page:"
msgstr ""

#: ../../src/couchapp/views/pagination.rst:160
msgid "So we query CouchDB with::"
msgstr ""

#: ../../src/couchapp/views/pagination.rst:164
msgid ""
"Note we have to use ``'`` (single quotes) to escape the ``&`` character that"
" is special to the shell we execute curl in."
msgstr ""

#: ../../src/couchapp/views/pagination.rst:180
msgid ""
"Implementing the ``hasPrev()`` and ``hasNext()`` method is pretty "
"straightforward:"
msgstr ""

#: ../../src/couchapp/views/pagination.rst:198
msgid "The dealbreaker"
msgstr ""

#: ../../src/couchapp/views/pagination.rst:200
msgid ""
"This all looks easy and straightforward, but it has one fatal flaw. Remember"
" how view results are generated from the underlying B-tree index: CouchDB "
"jumps to the first row (or the first row that matches ``startkey``, if "
"provided) and reads one row after the other from the index until there are "
"no more rows (or ``limit`` or ``endkey`` match, if provided)."
msgstr ""

#: ../../src/couchapp/views/pagination.rst:206
msgid ""
"The ``skip`` argument works like this: in addition to going to the first row"
" and starting to read, skip will skip as many rows as specified, but CouchDB"
" will still read from the first row; it just won’t return any values for the"
" skipped rows. If you specify ``skip=100``, CouchDB will read 100 rows and "
"not create output for them. This doesn’t sound too bad, but it is very bad, "
"when you use 1000 or even 10000 as skip values. CouchDB will have to look at"
" a lot of rows unnecessarily."
msgstr ""

#: ../../src/couchapp/views/pagination.rst:214
msgid ""
"As a rule of thumb, skip should be used only with single digit values. While"
" it’s possible that there are legitimate use cases where you specify a "
"larger value, they are a good indicator for potential problems with your "
"solution. Finally, for the calculations to work, you need to add a reduce "
"function and make two calls to the view per page to get all the numbering "
"right, and there’s still a potential for error."
msgstr ""

#: ../../src/couchapp/views/pagination.rst:222
msgid "Fast Paging (Do Use)"
msgstr ""

#: ../../src/couchapp/views/pagination.rst:224
msgid ""
"The correct solution is not much harder. Instead of slicing the result set "
"into equally sized pages, we look at 10 rows at a time and use ``startkey`` "
"to jump to the next 10 rows. We even use skip, but only with the value 1."
msgstr ""

#: ../../src/couchapp/views/pagination.rst:228
msgid "Here is how it works:"
msgstr ""

#: ../../src/couchapp/views/pagination.rst:230
msgid "Request `rows_per_page + 1` rows from the view"
msgstr ""

#: ../../src/couchapp/views/pagination.rst:231
msgid ""
"Display `rows_per_page` rows, `store + 1` row as `next_startkey` and "
"`next_startkey_docid`"
msgstr ""

#: ../../src/couchapp/views/pagination.rst:233
msgid "As page information, keep ``startkey`` and `next_startkey`"
msgstr ""

#: ../../src/couchapp/views/pagination.rst:234
msgid ""
"Use the `next_*` values to create the next link, and use the others to "
"create the previous link"
msgstr ""

#: ../../src/couchapp/views/pagination.rst:237
msgid ""
"The trick to finding the next page is pretty simple. Instead of requesting "
"10 rows for a page, you request 11 rows, but display only 10 and use the "
"values in the 11th row as the ``startkey`` for the next page. Populating the"
" link to the previous page is as simple as carrying the current ``startkey``"
" over to the next page. If there’s no previous ``startkey``, we are on the "
"first page. We stop displaying the link to the next page if we get "
"`rows_per_page` or less rows back. This is called linked list pagination, as"
" we go from page to page, or list item to list item, instead of jumping "
"directly to a pre-computed page. There is one caveat, though. Can you spot "
"it?"
msgstr ""

#: ../../src/couchapp/views/pagination.rst:247
msgid ""
"CouchDB view keys do not have to be unique; you can have multiple index "
"entries read. What if you have more index entries for a key than rows that "
"should be on a page? ``startkey`` jumps to the first row, and you’d be "
"screwed if CouchDB didn’t have an additional parameter for you to use. All "
"view keys with the same value are internally sorted by `docid`, that is, the"
" ID of the document that created that view row. You can use the "
"``startkey_docid`` and ``endkey_docid`` parameters to get subsets of these "
"rows. For pagination, we still don’t need ``endkey_docid``, but "
"``startkey_docid`` is very handy. In addition to ``startkey`` and ``limit``,"
" you also use ``startkey_docid`` for pagination if, and only if, the extra "
"row you fetch to find the next page has the same key as the current "
"``startkey``."
msgstr ""

#: ../../src/couchapp/views/pagination.rst:259
msgid ""
"It is important to note that the `*_docid` parameters only work in addition "
"to the `*key` parameters and are only useful to further narrow down the "
"result set of a view for a single key. They do not work on their own (the "
"one exception being the built-in :ref:`_all_docs view <api/db/all_docs>`  "
"that already sorts by document ID)."
msgstr ""

#: ../../src/couchapp/views/pagination.rst:265
msgid ""
"The advantage of this approach is that all the key operations can be "
"performed on the super-fast B-tree index behind the view. Looking up a page "
"doesn’t include scanning through hundreds and thousands of rows "
"unnecessarily."
msgstr ""

#: ../../src/couchapp/views/pagination.rst:270
msgid "Jump to Page"
msgstr ""

#: ../../src/couchapp/views/pagination.rst:272
msgid ""
"One drawback of the linked list style pagination is that you can’t pre-"
"compute the rows for a particular page from the page number and the rows per"
" page. Jumping to a specific page doesn’t really work. Our gut reaction, if "
"that concern is raised, is, “Not even Google is doing that!” and we tend to "
"get away with it. Google always pretends on the first page to find 10 more "
"pages of results. Only if you click on the second page (something very few "
"people actually do) might Google display a reduced set of pages. If you page"
" through the results, you get links for the previous and next 10 pages, but "
"no more. Pre-computing the necessary ``startkey`` and ``startkey_docid`` for"
" 20 pages is a feasible operation and a pragmatic optimization to know the "
"rows for every page in a result set that is potentially tens of thousands of"
" rows long, or more."
msgstr ""

#: ../../src/couchapp/views/pagination.rst:285
msgid ""
"If you really do need to jump to a page over the full range of documents (we"
" have seen applications that require that), you can still maintain an "
"integer value index as the view index and take a hybrid approach at solving "
"pagination."
msgstr ""
