# 
msgid ""
msgstr ""
"Project-Id-Version: Apache CouchDB 1.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-21 22:51\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../src/couchapp/ddocs.rst:19
msgid "Design Functions"
msgstr ""

#: ../../src/couchapp/ddocs.rst:21
msgid ""
"In this section we'll show how to write design documents, using the built-in"
" :ref:`JavaScript Query Server <query-server/js>`."
msgstr ""

#: ../../src/couchapp/ddocs.rst:24
msgid ""
"But before we start to write our first function, let's take a look at the "
"list of common objects that will be used during our code journey - we'll be "
"using them extensively within each function:"
msgstr ""

#: ../../src/couchapp/ddocs.rst:28
msgid ":ref:`Database information object <dbinfo_object>`"
msgstr ""

#: ../../src/couchapp/ddocs.rst:29
msgid ":ref:`Request object <request_object>`"
msgstr ""

#: ../../src/couchapp/ddocs.rst:30
msgid ":ref:`Response object <response_object>`"
msgstr ""

#: ../../src/couchapp/ddocs.rst:31
msgid ":ref:`UserCtx object <userctx_object>`"
msgstr ""

#: ../../src/couchapp/ddocs.rst:32
msgid ":ref:`Database Security object <security_object>`"
msgstr ""

#: ../../src/couchapp/ddocs.rst:33
msgid ":ref:`Guide to JavaScript Query Server <query-server/js>`"
msgstr ""

#: ../../src/couchapp/ddocs.rst:38
msgid "View functions"
msgstr ""

#: ../../src/couchapp/ddocs.rst:40
msgid ""
"Views are the primary tool used for querying and reporting on CouchDB "
"databases."
msgstr ""

#: ../../src/couchapp/ddocs.rst:45
msgid "Map functions"
msgstr ""

#: ../../src/couchapp/ddocs.rst:51
msgid ""
"Map functions accept a single document as the argument and (optionally) "
":func:`emit` key/value pairs that are stored in a view."
msgstr ""

#: ../../src/couchapp/ddocs.rst:64
msgid ""
"In this example a key/value pair is emitted for each value in the `tags` "
"array of a document with a `type` of \"post\". Note that :func:`emit` may be"
" called many times for a single document, so the same document may be "
"available by several different keys."
msgstr ""

#: ../../src/couchapp/ddocs.rst:69
msgid ""
"Also keep in mind that each document is *sealed* to prevent situation when "
"one map function changes document state and the other one received a "
"modified version."
msgstr ""

#: ../../src/couchapp/ddocs.rst:73
msgid ""
"For efficiency reasons, documents are passed to a group of map functions - "
"each document is processed by group of map functions from all views of "
"related design document. This means that if you trigger index update for one"
" view in ddoc, all others will get updated too."
msgstr ""

#: ../../src/couchapp/ddocs.rst:78
msgid ""
"Since `1.1.0` release `map` function supports :ref:`CommonJS <commonjs>` "
"modules and access to :func:`require` function."
msgstr ""

#: ../../src/couchapp/ddocs.rst:84
msgid "Reduce and rereduce functions"
msgstr ""

#: ../../src/couchapp/ddocs.rst:95
msgid ""
"Reduce functions takes two required arguments of keys and values lists - the"
" result of the related map function - and optional third one which indicates"
" if `rereduce` mode is active or not. `Rereduce` is using for additional "
"reduce values list, so when it is ``true`` there is no information about "
"related `keys` (first argument is ``null``)."
msgstr ""

#: ../../src/couchapp/ddocs.rst:101
msgid ""
"Note, that if produced result by `reduce` function is longer than initial "
"values list then a Query Server error will be raised. However, this behavior"
" could be disabled by setting ``reduce_limit`` config option to ``false``:"
msgstr ""

#: ../../src/couchapp/ddocs.rst:110
msgid ""
"While disabling ``reduce_limit`` might be useful for debug proposes, "
"remember, that main task of reduce functions is to *reduce* mapped result, "
"not to make it even bigger. Generally, your reduce function should converge "
"rapidly to a single value - which could be an array or similar object."
msgstr ""

#: ../../src/couchapp/ddocs.rst:119
msgid "Builtin reduce functions"
msgstr ""

#: ../../src/couchapp/ddocs.rst:121
msgid ""
"Additionally, CouchDB has three built-in reduce functions. These are "
"implemented in Erlang and runs inside CouchDB, so they are much faster than "
"the equivalent JavaScript functions: ``_sum``, ``_count`` and ``_stats``. "
"Their equivalents in JavaScript below:"
msgstr ""

#: ../../src/couchapp/ddocs.rst:161
msgid "**Why don't reduce functions support CommonJS modules?**"
msgstr ""

#: ../../src/couchapp/ddocs.rst:163
msgid ""
"While `map` functions have limited access to stored modules through "
":func:`require` function there is no such feature for `reduce` functions. "
"The reason lies deep inside in mechanism how `map` and `reduce` functions "
"are processed by Query Server. Let's take a look on `map` functions first:"
msgstr ""

#: ../../src/couchapp/ddocs.rst:168
msgid ""
"CouchDB sends all `map` functions for processed design document to Query "
"Server."
msgstr ""

#: ../../src/couchapp/ddocs.rst:170
msgid ""
"Query Server handles them one by one, compiles and puts them onto an "
"internal stack."
msgstr ""

#: ../../src/couchapp/ddocs.rst:172
msgid ""
"After all `map` functions had been processed, CouchDB will send the "
"remaining documents to index one by one."
msgstr ""

#: ../../src/couchapp/ddocs.rst:174
msgid ""
"The Query Server receives the document object and applies it to every "
"function from the stack. The emitted results are then joined into a single "
"array and sent back to CouchDB."
msgstr ""

#: ../../src/couchapp/ddocs.rst:178
msgid "Now let's see how `reduce` functions are handled:"
msgstr ""

#: ../../src/couchapp/ddocs.rst:180
msgid ""
"CouchDB sends *as single command* list of available `reduce` functions with "
"result list of key-value pairs that was previously received as result of "
"`map` functions work."
msgstr ""

#: ../../src/couchapp/ddocs.rst:183
msgid ""
"Query Server compiles reduce functions and applies them to key-value lists. "
"Reduced result sends back to CouchDB."
msgstr ""

#: ../../src/couchapp/ddocs.rst:186
msgid ""
"As you may note, `reduce` functions been applied in single shot while `map` "
"ones are applied in an iterative way per each document. This means that it's"
" possible for `map` functions to precompile CommonJS libraries and use them "
"during the entire view processing, but for `reduce` functions it will be "
"compiled again and again for each view result reduction, which will lead to "
"performance degradation (`reduce` function are already does hard work to "
"make large result smaller)."
msgstr ""

#: ../../src/couchapp/ddocs.rst:198
msgid "Show functions"
msgstr ""

#: ../../src/couchapp/ddocs.rst:208
msgid ""
"Show functions are used to represent documents in various formats, commonly "
"as HTML page with nicer formatting. They can also be used to run server-side"
" functions without requiring a pre-existing document."
msgstr ""

#: ../../src/couchapp/ddocs.rst:212
msgid "Basic example of show function could be:"
msgstr ""

#: ../../src/couchapp/ddocs.rst:224
msgid "Also, there is more simple way to return json encoded data:"
msgstr ""

#: ../../src/couchapp/ddocs.rst:238
msgid "and even files (this one is CouchDB logo):"
msgstr ""

#: ../../src/couchapp/ddocs.rst:260
msgid ""
"But what if you need to represent data in different formats via a single "
"function? Functions :func:`registerType` and :func:`provides` are your the "
"best friends in that question:"
msgstr ""

#: ../../src/couchapp/ddocs.rst:309
msgid ""
"This function may return `html`, `json` , `xml` or our custom `text json` "
"format representation of same document object with same processing rules. "
"Probably, the `xml` provider in our function needs more care to handle "
"nested objects correctly, and keys with invalid characters, but you've got "
"the idea!"
msgstr ""

#: ../../src/couchapp/ddocs.rst:317 ../../src/couchapp/ddocs.rst:371
#: ../../src/couchapp/ddocs.rst:426 ../../src/couchapp/ddocs.rst:569
#: ../../src/couchapp/ddocs.rst:758
msgid "CouchDB Wiki:"
msgstr ""

#: ../../src/couchapp/ddocs.rst:317
msgid ""
"`Showing Documents "
"<http://wiki.apache.org/couchdb/Formatting_with_Show_and_List#Showing_Documents>`_"
msgstr ""

#: ../../src/couchapp/ddocs.rst:319 ../../src/couchapp/ddocs.rst:373
#: ../../src/couchapp/ddocs.rst:567 ../../src/couchapp/ddocs.rst:756
msgid "CouchDB Guide:"
msgstr ""

#: ../../src/couchapp/ddocs.rst:320
msgid "`Show Functions <http://guide.couchdb.org/editions/1/en/show.html>`_"
msgstr ""

#: ../../src/couchapp/ddocs.rst:326
msgid "List functions"
msgstr ""

#: ../../src/couchapp/ddocs.rst:336
msgid ""
"While :ref:`showfun` are used to customize document presentation, "
":ref:`listfun` are used for same purpose, but against :ref:`viewfun` "
"results."
msgstr ""

#: ../../src/couchapp/ddocs.rst:339
msgid ""
"The next list function formats view and represents it as a very simple HTML "
"page:"
msgstr ""

#: ../../src/couchapp/ddocs.rst:363
msgid ""
"Templates and styles could obviously be used to present data in a nicer "
"fashion, but this is an excellent starting point. Note that you may also use"
" :func:`registerType` and :func:`provides` functions in the same way as for "
":ref:`showfun`!"
msgstr ""

#: ../../src/couchapp/ddocs.rst:371
msgid ""
"`Listing Views with CouchDB 0.10 and later "
"<http://wiki.apache.org/couchdb/Formatting_with_Show_and_List#Listing_Views_with_CouchDB_0.10_and_later>`_"
msgstr ""

#: ../../src/couchapp/ddocs.rst:374
msgid ""
"`Transforming Views with List Functions "
"<http://guide.couchdb.org/draft/transforming.html>`_"
msgstr ""

#: ../../src/couchapp/ddocs.rst:380
msgid "Update functions"
msgstr ""

#: ../../src/couchapp/ddocs.rst:396
msgid ""
"Update handlers are functions that clients can request to invoke server-side"
" logic that will create or update a document. This feature allows a range of"
" use cases such as providing a server-side last modified timestamp, updating"
" individual fields in a document without first getting the latest revision, "
"etc."
msgstr ""

#: ../../src/couchapp/ddocs.rst:401
msgid ""
"When the request to an update handler includes a document ID in the URL, the"
" server will provide the function with the most recent version of that "
"document. You can provide any other values needed by the update handler "
"function via the ``POST``/``PUT`` entity body or query string parameters of "
"the request."
msgstr ""

#: ../../src/couchapp/ddocs.rst:406
msgid ""
"The basic example that demonstrates all use-cases of update handlers below:"
msgstr ""

#: ../../src/couchapp/ddocs.rst:427
msgid ""
"`Document Update Handlers "
"<http://wiki.apache.org/couchdb/Document_Update_Handlers>`_"
msgstr ""

#: ../../src/couchapp/ddocs.rst:433
msgid "Filter functions"
msgstr ""

#: ../../src/couchapp/ddocs.rst:442
msgid ""
"Filter functions are mostly acts like :ref:`showfun` and :ref:`listfun`: "
"they formats, but more correctly to say, they *filters* :ref:`changes "
"feed<changes>`."
msgstr ""

#: ../../src/couchapp/ddocs.rst:446
msgid "Classic filters"
msgstr ""

#: ../../src/couchapp/ddocs.rst:448
msgid ""
"By default the changes feed emits all database documents changes. But if "
"you're waiting for some special changes, processing all documents is "
"inefficient."
msgstr ""

#: ../../src/couchapp/ddocs.rst:451
msgid ""
"Filters are special design document functions that allows changes feed to "
"emit only specific documents that pass filter rules."
msgstr ""

#: ../../src/couchapp/ddocs.rst:454
msgid ""
"Lets assume that our database is a mailbox and we need to to handle only new"
" mails (documents with status `new`) events. Assuming that, our filter "
"function will looks like next one:"
msgstr ""

#: ../../src/couchapp/ddocs.rst:472
msgid ""
"Filter functions must return ``true`` in fact if document passed all defined"
" rules. Now, if you apply this function to changes feed it will emit only "
"changes about \"new mails\"::"
msgstr ""

#: ../../src/couchapp/ddocs.rst:486
msgid ""
"Note, that ``last_seq`` number is 27, but we'd received only two records. "
"Seems like any other changes was about documents that hasn't passed our "
"filter."
msgstr ""

#: ../../src/couchapp/ddocs.rst:489
msgid ""
"Probably, we also need to filter changes feed of our mailbox not only by "
"single status value: we're also interested in statuses like \"spam\" to "
"update spam-filter heuristic rules, \"outgoing\" to let mail daemon actually"
" send mails and so on. Creating a lot of similar functions that actually "
"does similar work isn't good idea - so we need dynamic filter to go."
msgstr ""

#: ../../src/couchapp/ddocs.rst:495
msgid ""
"If you have noted, filter functions takes second argument as :ref:`request "
"<request_object>` object - it allows to create dynamic filters based on "
"query parameters, :ref:`user context <userctx_object>` and more."
msgstr ""

#: ../../src/couchapp/ddocs.rst:499
msgid "The dynamic version of our filter now will be next:"
msgstr ""

#: ../../src/couchapp/ddocs.rst:515
msgid ""
"and now we have pass `status` query parameter in request to let filter match"
" only required documents::"
msgstr ""

#: ../../src/couchapp/ddocs.rst:528
msgid "and we can change filter behavior with easy::"
msgstr ""

#: ../../src/couchapp/ddocs.rst:540
msgid ""
"Combining filters with `continuous` feed allows to create powerful event-"
"driven systems."
msgstr ""

#: ../../src/couchapp/ddocs.rst:546
msgid "View filters"
msgstr ""

#: ../../src/couchapp/ddocs.rst:548
msgid ""
"View filters are the same as above, with one small difference: they use "
"views `map` function instead to `filter` one to process the changes feed. "
"Each time when a key-value pair could be emitted, a change is returned. This"
" allows to avoid creating filter functions that are mostly does same works "
"as views."
msgstr ""

#: ../../src/couchapp/ddocs.rst:553
msgid ""
"To use them just specify `_view` value for ``filter`` parameter and "
"`designdoc/viewname` for ``view`` one::"
msgstr ""

#: ../../src/couchapp/ddocs.rst:560
msgid ""
"Since view filters uses `map` functions as filters, they can't show any "
"dynamic behavior since :ref:`request object<request_object>` is not "
"available."
msgstr ""

#: ../../src/couchapp/ddocs.rst:567
msgid ""
"`Guide to filter change notification "
"<http://guide.couchdb.org/draft/notifications.html#filters>`_"
msgstr ""

#: ../../src/couchapp/ddocs.rst:570
msgid ""
"`Filtered replication "
"<http://wiki.apache.org/couchdb/Replication#Filtered_Replication>`_"
msgstr ""

#: ../../src/couchapp/ddocs.rst:576
msgid "Validate document update functions"
msgstr ""

#: ../../src/couchapp/ddocs.rst:585
msgid "``forbidden`` error to gracefully prevent document storing."
msgstr ""

#: ../../src/couchapp/ddocs.rst:586
msgid ""
"``unauthorized`` error to prevent storage and allow the user to re-auth."
msgstr ""

#: ../../src/couchapp/ddocs.rst:589
msgid ""
"A design document may contain a function named `validate_doc_update` which "
"can be used to prevent invalid or unauthorized document update requests from"
" being stored.  The function is passed the new document from the update "
"request, the current document stored in the database, a "
":ref:`userctx_object` containing information about the user writing the "
"document (if present), and a :ref:`security_object` with lists of database "
"security roles."
msgstr ""

#: ../../src/couchapp/ddocs.rst:596
msgid ""
"Validation functions typically examine the structure of the new document to "
"ensure that required fields are present and to verify that the requesting "
"user should be allowed to make changes to the document properties.  For "
"example, an application may require that a user must be authenticated in "
"order to create a new document or that specific document fields be present "
"when a document is updated. The validation function can abort the pending "
"document write by throwing one of two error objects:"
msgstr ""

#: ../../src/couchapp/ddocs.rst:612
msgid ""
"Document validation is optional, and each design document in the database "
"may have at most one validation function.  When a write request is received "
"for a given database, the validation function in each design document in "
"that database is called in an unspecified order.  If any of the validation "
"functions throw an error, the write will not succeed."
msgstr ""

#: ../../src/couchapp/ddocs.rst:618
msgid ""
"**Example**: The ``_design/_auth`` ddoc from `_users` database uses a "
"validation function to ensure that documents contain some required fields "
"and are only modified by a user with the ``_admin`` role:"
msgstr ""

#: ../../src/couchapp/ddocs.rst:750
msgid ""
"The ``return`` statement used only for function, it has no impact on the "
"validation process."
msgstr ""

#: ../../src/couchapp/ddocs.rst:756
msgid ""
"`Validation Functions "
"<http://guide.couchdb.org/editions/1/en/validation.html>`_"
msgstr ""

#: ../../src/couchapp/ddocs.rst:759
msgid ""
"`Document Update Validation "
"<http://wiki.apache.org/couchdb/Document_Update_Validation>`_"
msgstr ""
