# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013, The Apache Software Foundation
# This file is distributed under the same license as the Apache CouchDB package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Apache CouchDB 1.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-21 23:32\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../src/replication/replicator.rst:16
# 0e21372fd0ad46e4a75fa31c7f04ee93
msgid "Replicator Database"
msgstr ""

#: ../../src/replication/replicator.rst:18
# 574674c7708747b79994e7a40d368cba
msgid "A database where you ``PUT``/``POST`` documents to trigger replications and you ``DELETE`` to cancel ongoing replications. These documents have exactly the same content as the JSON objects we used to ``POST`` to ``_replicate`` (fields ``source``, ``target``, ``create_target``, ``continuous``, ``doc_ids``, ``filter``, ``query_params``."
msgstr ""

#: ../../src/replication/replicator.rst:24
# 041c5fd4baaa40a1964847b3e5d4d217
msgid "Replication documents can have a user defined ``_id``. Design documents (and ``_local`` documents) added to the replicator database are ignored."
msgstr ""

#: ../../src/replication/replicator.rst:27
# c773f6b649024e029ca73b61c6d4818a
msgid "The default name of this database is ``_replicator``. The name can be changed in the ``local.ini`` configuration, section ``[replicator]``, parameter ``db``."
msgstr ""

#: ../../src/replication/replicator.rst:32
# 0a104fc79c844cf2862241339384469b
msgid "Basics"
msgstr ""

#: ../../src/replication/replicator.rst:34
# dc2a501f1b8f49358ca19c09b4619cbd
msgid "Let's say you PUT the following document into ``_replicator``:"
msgstr ""

#: ../../src/replication/replicator.rst:45
# 4c6de20ca1724d3297f4ca44bfce12c8
msgid "In the couch log you'll see 2 entries like these:"
msgstr ""

#: ../../src/replication/replicator.rst:52
# 14e444b1bbe64d128876e1ffec90bb48
msgid "As soon as the replication is triggered, the document will be updated by CouchDB with 3 new fields:"
msgstr ""

#: ../../src/replication/replicator.rst:67
# 1184ff6ab94c4486aae46bae17229e2c
msgid "Special fields set by the replicator start with the prefix ``_replication_``."
msgstr ""

#: ../../src/replication/replicator.rst:70
# 69742fc86318453a9618fe75151801fc
msgid "``_replication_id``"
msgstr ""

#: ../../src/replication/replicator.rst:72
# f26e1f0e564948d1a9dde69dae26f3c1
msgid "The ID internally assigned to the replication. This is also the ID exposed by ``/_active_tasks``."
msgstr ""

#: ../../src/replication/replicator.rst:75
# 12de55cbd215484c9d5e7ce3bbb6f1c9
msgid "``_replication_state``"
msgstr ""

#: ../../src/replication/replicator.rst:77
# d7043f6027214d79a362f8b3d8df46a4
msgid "The current state of the replication."
msgstr ""

#: ../../src/replication/replicator.rst:79
# d324deb020884747b4cf4d6745613911
msgid "``_replication_state_time``"
msgstr ""

#: ../../src/replication/replicator.rst:81
# 31d00e866bdc455d9ea678c957b00b19
msgid "A Unix timestamp (number of seconds since 1 Jan 1970) that tells us when the current replication state (marked in ``_replication_state``) was set."
msgstr ""

#: ../../src/replication/replicator.rst:85
# 4068b29c2cf740439b075afeaf798422
msgid "When the replication finishes, it will update the ``_replication_state`` field (and ``_replication_state_time``) with the value ``completed``, so the document will look like:"
msgstr ""

#: ../../src/replication/replicator.rst:101
# 6a54a781835243d5b3f5fd1e8ee6cf52
msgid "When an error happens during replication, the ``_replication_state`` field is set to ``error`` (and ``_replication_state_time`` gets updated of course)."
msgstr ""

#: ../../src/replication/replicator.rst:105
# 87b4c02334a840cea4fc34d0b4ba3f1b
msgid "When you PUT/POST a document to the ``_replicator`` database, CouchDB will attempt to start the replication up to 10 times (configurable under ``[replicator]``, parameter ``max_replication_retry_count``). If it fails on the first attempt, it waits 5 seconds before doing a second attempt. If the second attempt fails, it waits 10 seconds before doing a third attempt. If the third attempt fails, it waits 20 seconds before doing a fourth attempt (each attempt doubles the previous wait period). When an attempt fails, the Couch log will show you something like:"
msgstr ""

#: ../../src/replication/replicator.rst:119
# 0ccec02961154a779b2bb219dd0afb62
msgid "The ``_replication_state`` field is only set to ``error`` when all the attempts were unsuccessful."
msgstr ""

#: ../../src/replication/replicator.rst:122
# 06e32bf794f3427990dffa988ffdf091
msgid "There are only 3 possible values for the ``_replication_state`` field: ``triggered``, ``completed`` and ``error``. Continuous replications never get their state set to ``completed``."
msgstr ""

#: ../../src/replication/replicator.rst:127
# 431862aac4aa405fb60e2e490f2232ea
msgid "Documents describing the same replication"
msgstr ""

#: ../../src/replication/replicator.rst:129
# 78443e01a640428a854680a633aafebf
msgid "Lets suppose 2 documents are added to the ``_replicator`` database in the following order:"
msgstr ""

#: ../../src/replication/replicator.rst:140
# 816868a2531e471c849dccc8435a33f6
msgid "and"
msgstr ""

#: ../../src/replication/replicator.rst:150
# 7dfdeaa5f27643a6a906fad307388fe7
msgid "Both describe exactly the same replication (only their ``_ids`` differ). In this case document ``doc_A`` triggers the replication, getting updated by CouchDB with the fields ``_replication_state``, ``_replication_state_time`` and ``_replication_id``, just like it was described before. Document ``doc_B`` however, is only updated with one field, the ``_replication_id`` so it will look like this:"
msgstr ""

#: ../../src/replication/replicator.rst:166
# 16dd6e41d26d43eeaf992b54174a6ad4
msgid "While document ``doc_A`` will look like this:"
msgstr ""

#: ../../src/replication/replicator.rst:179
# 70843e5ee4214365a348a03f1020d826
msgid "Note that both document get exactly the same value for the ``_replication_id`` field. This way you can identify which documents refer to the same replication - you can for example define a view which maps replication IDs to document IDs."
msgstr ""

#: ../../src/replication/replicator.rst:185
# 1d0e4b5cd7774f1f90ac92a33562da11
msgid "Canceling replications"
msgstr ""

#: ../../src/replication/replicator.rst:187
# 4911533df7394797843cf8cf259ea10c
msgid "To cancel a replication simply ``DELETE`` the document which triggered the replication. The Couch log will show you an entry like the following:"
msgstr ""

#: ../../src/replication/replicator.rst:196
# 5b7a8ebffe6141f7bdb3162ba6b928b6
msgid "You need to ``DELETE`` the document that triggered the replication. ``DELETE``-ing another document that describes the same replication but did not trigger it, will not cancel the replication."
msgstr ""

#: ../../src/replication/replicator.rst:201
# 35842320370e48908396c8cd14ba4093
msgid "Server restart"
msgstr ""

#: ../../src/replication/replicator.rst:203
# 669c0d079b2244a38667f5b217663850
msgid "When CouchDB is restarted, it checks its ``_replicator`` database and restarts any replication that is described by a document that either has its ``_replication_state`` field set to ``triggered`` or it doesn't have yet the ``_replication_state`` field set."
msgstr ""

#: ../../src/replication/replicator.rst:209
# 9518418eacd6441ebfce66f57f48e4d3
msgid "Continuous replications always have a ``_replication_state`` field with the value ``triggered``, therefore they're always restarted when CouchDB is restarted."
msgstr ""

#: ../../src/replication/replicator.rst:214
# 4e99e3a619cc471c80ec909e6382c042
msgid "Changing the Replicator Database"
msgstr ""

#: ../../src/replication/replicator.rst:216
# 405f9ebb74d94fea8760cac6f9463d7b
msgid "Imagine your replicator database (default name is ``_replicator``) has the two following documents that represent pull replications from servers A and B:"
msgstr ""

#: ../../src/replication/replicator.rst:244
# c27c44ffc12244f1812a8a8b22830b76
msgid "Now without stopping and restarting CouchDB, you change the name of the replicator database to ``another_replicator_db``:"
msgstr ""

#: ../../src/replication/replicator.rst:252
# 5a350f9d01f44272be9dda5c98abe453
msgid "As soon as this is done, both pull replications defined before, are stopped. This is explicitly mentioned in CouchDB's log:"
msgstr ""

#: ../../src/replication/replicator.rst:260
# 6de6a089f55243059deba5d297639f21
msgid "Imagine now you add a replication document to the new replicator database named ``another_replicator_db``:"
msgstr ""

#: ../../src/replication/replicator.rst:272
# b4218cbc9dd64a64b6dc16886f5e8076
msgid "From now own you have a single replication going on in your system: a pull replication pulling from server X. Now you change back the replicator database to the original one ``_replicator``:"
msgstr ""

#: ../../src/replication/replicator.rst:281
# 33e17c3c1cdf48bda38fc89fa74b8209
msgid "Immediately after this operation, the replication pulling from server X will be stopped and the replications defined in the ``_replicator`` database (pulling from servers A and B) will be resumed."
msgstr ""

#: ../../src/replication/replicator.rst:285
# c977c50b4f984374978116c25d9187c2
msgid "Changing again the replicator database to ``another_replicator_db`` will stop the pull replications pulling from servers A and B, and resume the pull replication pulling from server X."
msgstr ""

#: ../../src/replication/replicator.rst:290
# 28b887050cb34999833d7df93213f32d
msgid "Replicating the replicator database"
msgstr ""

#: ../../src/replication/replicator.rst:292
# fab736c8fa2e4a1e9da608da3fe9795e
msgid "Imagine you have in server C a replicator database with the two following pull replication documents in it:"
msgstr ""

#: ../../src/replication/replicator.rst:319
# fe8f310a13c0497c9237520a14f19fcc
msgid "Now you would like to have the same pull replications going on in server D, that is, you would like to have server D pull replicating from servers A and B. You have two options:"
msgstr ""

#: ../../src/replication/replicator.rst:323
# 5469df3397ef4bdebee2c9dda920b3ea
msgid "Explicitly add two documents to server's D replicator database"
msgstr ""

#: ../../src/replication/replicator.rst:325
# 3c4a86e35266428aa6adc2e77ad7add1
msgid "Replicate server's C replicator database into server's D replicator database"
msgstr ""

#: ../../src/replication/replicator.rst:328
# 0913c16203f949e88a254c30789f524e
msgid "Both alternatives accomplish exactly the same goal."
msgstr ""

#: ../../src/replication/replicator.rst:331
# 8449745f8214412781273726fd646782
msgid "Delegations"
msgstr ""

#: ../../src/replication/replicator.rst:333
# 06ca330b20d64308b820e6f9a601ecbd
msgid "Replication documents can have a custom ``user_ctx`` property. This property defines the user context under which a replication runs. For the old way of triggering replications (POSTing to ``/_replicate/``), this property was not needed (it didn't exist in fact) - this is because at the moment of triggering the replication it has information about the authenticated user. With the replicator database, since it's a regular database, the information about the authenticated user is only present at the moment the replication document is written to the database - the replicator database implementation is like a ``_changes`` feed consumer (with ``?include_docs=true``) that reacts to what was written to the replicator database - in fact this feature could be implemented with an external script/program. This implementation detail implies that for non admin users, a ``user_ctx`` property, containing the user's name and a subset of his/her roles, must be defined in the replication document. This is ensured by the document update validation function present in the default design document of the replicator database. This validation function also ensure that a non admin user can set a user name property in the ``user_ctx`` property that doesn't match his/her own name (same principle applies for the roles)."
msgstr ""

#: ../../src/replication/replicator.rst:353
# c64f117ed3724e9faf362c716d3b9507
msgid "For admins, the ``user_ctx`` property is optional, and if it's missing it defaults to a user context with name null and an empty list of roles - this mean design documents will not be written to local targets. If writing design documents to local targets is desired, the a user context with the roles ``_admin`` must be set explicitly."
msgstr ""

#: ../../src/replication/replicator.rst:359
# 2f10c406ca824a36b2e50406ca94608f
msgid "Also, for admins the ``user_ctx`` property can be used to trigger a replication on behalf of another user. This is the user context that will be passed to local target database document validation functions."
msgstr ""

#: ../../src/replication/replicator.rst:364
# 0fc07c68b4b545e3be06309e3005c814
msgid "The ``user_ctx`` property only has effect for local endpoints."
msgstr ""

#: ../../src/replication/replicator.rst:366
# 6434d9aa9758483196c8cd21c1246ee7
msgid "Example delegated replication document:"
msgstr ""

#: ../../src/replication/replicator.rst:381
# 29f9acb5cacb4fe1ab80df367ae683b9
msgid "As stated before, for admins the ``user_ctx`` property is optional, while for regular (non admin) users it's mandatory. When the roles property of ``user_ctx`` is missing, it defaults to the empty list ``[ ]``."
msgstr ""

