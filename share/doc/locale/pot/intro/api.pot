# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013, The Apache Software Foundation
# This file is distributed under the same license as the Apache CouchDB package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Apache CouchDB 1.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-21 23:32\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../src/intro/api.rst:18
# cd45e5a583e14a50a53594bf4772f346
msgid "The Core API"
msgstr ""

#: ../../src/intro/api.rst:20
# 94df05058ffe48f597bf5fc864e5e964
msgid "This chapter explores the CouchDB in minute detail. It shows all the nitty-gritty and clever bits. We show you best practices and guide you around common pitfalls."
msgstr ""

#: ../../src/intro/api.rst:24
# 308be5d73fae44e484e704f84ae5e549
msgid "We start out by revisiting the basic operations we ran in the last chapter, looking behind the scenes. We also show what Futon needs to do behind its user interface to give us the nice features we saw earlier."
msgstr ""

#: ../../src/intro/api.rst:28
# d134b96184534fd580a208980591d171
msgid "This chapter is both an introduction to the core CouchDB API as well as a reference. If you can't remember how to run a particular request or why some parameters are needed, you can always come back here and look things up (we are probably the heaviest users of this chapter)."
msgstr ""

#: ../../src/intro/api.rst:33
# a2276b89a7b249aeb4b5a465eda4fcd8
msgid "While explaining the API bits and pieces, we sometimes need to take a larger detour to explain the reasoning for a particular request. This is a good opportunity for us to tell you why CouchDB works the way it does."
msgstr ""

#: ../../src/intro/api.rst:37
# a2653eaed34842b9bbe17b4bc9d1ffa0
msgid "The API can be subdivided into the following sections. We'll explore them individually:"
msgstr ""

#: ../../src/intro/api.rst:46
# 6282f5ae50e54b55bdcd8d809d4c3708
msgid "Server"
msgstr ""

#: ../../src/intro/api.rst:48
# b08aea95ce8d44ab9004bf669af0c8b2
msgid "This one is basic and simple. It can serve as a sanity check to see if CouchDB is running at all. It can also act as a safety guard for libraries that require a certain version of CouchDB. We're using the `curl`_ utility again::"
msgstr ""

#: ../../src/intro/api.rst:55
# 5dfba9ba52ef44029b18db170eb1f0b5
msgid "CouchDB replies, all excited to get going:"
msgstr ""

#: ../../src/intro/api.rst:69
# 4cbbce05317940d4908e1e79bfecd7ac
msgid "You get back a JSON string, that, if parsed into a native object or data structure of your programming language, gives you access to the welcome string and version information."
msgstr ""

#: ../../src/intro/api.rst:73
# 28a7c0dcb778494f8b0bd025e95731fb
msgid "This is not terribly useful, but it illustrates nicely the way CouchDB behaves. You send an HTTP request and you receive a JSON string in the HTTP response as a result."
msgstr ""

#: ../../src/intro/api.rst:81
# 79060bcc9c774b7e89a7cbf3dd63e78c
msgid "Databases"
msgstr ""

#: ../../src/intro/api.rst:83
# fd9f2d85c91b4266959bd02c61a88a9e
msgid "Now let's do something a little more useful: *create databases*. For the strict, CouchDB is a *database management system* (DMS). That means it can hold multiple databases. A database is a bucket that holds \"related data\". We'll explore later what that means exactly. In practice, the terminology is overlapping -- often people refer to a DMS as \"a database\" and also a database within the DMS as \"a database.\" We might follow that slight oddity, so don't get confused by it. In general, it should be clear from the context if we are talking about the whole of CouchDB or a single database within CouchDB."
msgstr ""

#: ../../src/intro/api.rst:92
# e7850164c0cf479db4dc75e2df7ff6b1
msgid "Now let's make one! We want to store our favorite music albums, and we creatively give our database the name albums. Note that we're now using the ``-X`` option again to tell curl to send a :method:`PUT` request instead of the default :method:`GET` request::"
msgstr ""

#: ../../src/intro/api.rst:99
#: ../../src/intro/api.rst:111
#: ../../src/intro/api.rst:370
#: ../../src/intro/api.rst:395
#: ../../src/intro/api.rst:412
#: ../../src/intro/api.rst:448
#: ../../src/intro/api.rst:594
# 9a79907ea30b4b1788a5b568776ad9ca
# c3b050a4fc344ac89670883ba0102c83
# 86dfc397aec946d4807848490e046562
# e2525b7ac3ba4bda97e2c55ee0bd1fd3
# 4e8b14ab3f654d7ba7641b40c0f5b0d7
# 6f90469594054e45b9513113ca5e949f
# d455c377e0f24c2780fac1a7388e78ef
msgid "CouchDB replies:"
msgstr ""

#: ../../src/intro/api.rst:105
# 85027a51a12e41569ce5ba6d200c8876
msgid "That's it. You created a database and CouchDB told you that all went well. What happens if you try to create a database that already exists? Let's try to create that database again::"
msgstr ""

#: ../../src/intro/api.rst:117
# 5b3a24046b5146a4981272882366dc08
msgid "We get back an error. This is pretty convenient. We also learn a little bit about how CouchDB works. CouchDB stores each database in a single file. Very simple."
msgstr ""

#: ../../src/intro/api.rst:121
# fa85493a30de45b98acee697f6f679b4
msgid "Let's create another database, this time with curl's ``-v`` (for \"verbose\") option. The verbose option tells curl to show us not only the essentials -- the HTTP response body -- but all the underlying request and response details::"
msgstr ""

#: ../../src/intro/api.rst:127
# 8eef2f224cbc4001aed8c1115d2cb02b
msgid "curl elaborates::"
msgstr ""

#: ../../src/intro/api.rst:148
# 00e33c30b7f6456595a2c24f78bc19c9
msgid "What a mouthful. Let's step through this line by line to understand what's going on and find out what's important. Once you've seen this output a few times, you'll be able to spot the important bits more easily."
msgstr ""

#: ../../src/intro/api.rst:156
# bdf48783f0e4400295c6d857ac4f0e30
msgid "This is curl telling us that it is going to establish a TCP connection to the CouchDB server we specified in our request URI. Not at all important, except when debugging networking issues."
msgstr ""

#: ../../src/intro/api.rst:165
# 56b8bc05f20b4e908a0461742e531d38
msgid "curl tells us it successfully connected to CouchDB. Again, not important if you aren't trying to find problems with your network."
msgstr ""

#: ../../src/intro/api.rst:168
# 74bec64b2b6a4ff7be4322e2d084db6b
msgid "The following lines are prefixed with ``>`` and ``<`` characters. The ``>`` means the line was sent to CouchDB verbatim (without the actual ``>``). The ``<`` means the line was sent back to curl by CouchDB."
msgstr ""

#: ../../src/intro/api.rst:176
# c07dcbeca6ee4fb38ca3066fd79dcbf0
msgid "This initiates an HTTP request. Its *method* is :method:`PUT`, the *URI* is ``/albums-backup``, and the HTTP version is ``HTTP/1.1``. There is also ``HTTP/1.0``, which is simpler in some cases, but for all practical reasons you should be using ``HTTP/1.1``."
msgstr ""

#: ../../src/intro/api.rst:181
# d23e8214acf24c3ea95c41bd671ec48d
msgid "Next, we see a number of *request headers*. These are used to provide additional details about the request to CouchDB."
msgstr ""

#: ../../src/intro/api.rst:188
# cc77ef61680842d6b8350f865e5b1cf1
msgid "The User-Agent header tells CouchDB which piece of client software is doing the HTTP request. We don't learn anything new: it's curl. This header is often useful in web development when there are known errors in client implementations that a server might want to prepare the response for. It also helps to determine which platform a user is on. This information can be used for technical and statistical reasons. For CouchDB, the :header:`User-Agent` header is irrelevant."
msgstr ""

#: ../../src/intro/api.rst:200
# e9ed7109ebc5495a98d259961a4d725b
msgid "The :header:`Host` header is required by ``HTTP 1.1``. It tells the server the hostname that came with the request."
msgstr ""

#: ../../src/intro/api.rst:207
# b88e5dbf0ba54a63b8e03aa43c829b3b
msgid "The :header:`Accept` header tells CouchDB that curl accepts any media type. We'll look into why this is useful a little later."
msgstr ""

#: ../../src/intro/api.rst:214
# 1c9569a1a3aa471e99be708622b6ee89
msgid "An empty line denotes that the request headers are now finished and the rest of the request contains data we're sending to the server. In this case, we're not sending any data, so the rest of the curl output is dedicated to the HTTP response."
msgstr ""

#: ../../src/intro/api.rst:223
# a8044ffde91542898ced169bf13f30ca
msgid "The first line of CouchDB's HTTP response includes the HTTP version information (again, to acknowledge that the requested version could be processed), an HTTP *status code*, and a *status code message*. Different requests trigger different response codes. There's a whole range of them telling the client (curl in our case) what effect the request had on the server. Or, if an error occurred, what kind of error. :rfc:`2616` (the HTTP 1.1 specification) defines clear behavior for response codes. CouchDB fully follows the RFC."
msgstr ""

#: ../../src/intro/api.rst:232
# e6199667a1d24dfb814555664a6fcd29
msgid "The :statuscode:`201` status code tells the client that the resource the request was made against was successfully created. No surprise here, but if you remember that we got an error message when we tried to create this database twice, you now know that this response could include a different response code. Acting upon responses based on response codes is a common practice. For example, all response codes of :statuscode:`400` or larger tell you that some error occurred. If you want to shortcut your logic and immediately deal with the error, you could just check a >= ``400`` response code."
msgstr ""

#: ../../src/intro/api.rst:246
# 0f83b8b0e51847e284d04a43107589b0
msgid "The :header:`Server` header is good for diagnostics. It tells us which CouchDB version and which underlying Erlang version we are talking to. In general, you can ignore this header, but it is good to know it's there if you need it."
msgstr ""

#: ../../src/intro/api.rst:255
# 5cf031df69934600bb2394b7455ca32c
msgid "The :header:`Date` header tells you the time of the server. Since client and server time are not necessarily synchronized, this header is purely informational. You shouldn't build any critical application logic on top of this!"
msgstr ""

#: ../../src/intro/api.rst:264
# a9a7ce9efe4e4c9182411b11363e892f
msgid "The :header:`Content-Type` header tells you which MIME type the HTTP response body is and its encoding. We already know CouchDB returns JSON strings. The appropriate :header:`Content-Type` header is :mimetype:`application/json`. Why do we see :mimetype:`text/plain`? This is where pragmatism wins over purity. Sending an :mimetype:`application/json` :header:`Content-Type` header will make a browser offer you the returned JSON for download instead of just displaying it. Since it is extremely useful to be able to test CouchDB from a browser, CouchDB sends a :mimetype:`text/plain` content type, so all browsers will display the JSON as text."
msgstr ""

#: ../../src/intro/api.rst:277
# 5a032d23984d4646ae7e74d96489c5e2
msgid "There are some extensions that make your browser JSON-aware, but they are not installed by default. For more information, look at the popular `JSONView`_ extension, available for both Firefox and Chrome."
msgstr ""

#: ../../src/intro/api.rst:283
# b90160fde2ea46ec9a025732f12778a9
msgid "Do you remember the :header:`Accept` request header and how it is set to ``\\*/\\* -> */*`` to express interest in any MIME type? If you send ``Accept: application/json`` in your request, CouchDB knows that you can deal with a pure JSON response with the proper :header:`Content-Type` header and will use it instead of :mimetype:`text/plain`."
msgstr ""

#: ../../src/intro/api.rst:293
# 8846ddd5ae5941f7bf202429291d3c03
msgid "The :header:`Content-Length` header simply tells us how many bytes the response body has."
msgstr ""

#: ../../src/intro/api.rst:300
# 452284cc1f92423cada8734d73f3b217
msgid "This :header:`Cache-Control` header tells you, or any proxy server between CouchDB and you, not to cache this response."
msgstr ""

#: ../../src/intro/api.rst:307
# 236640b4a88047328377967f73c4c42a
msgid "This empty line tells us we're done with the response headers and what follows now is the response body."
msgstr ""

#: ../../src/intro/api.rst:314
# f2cb2d163e474487baf1ae8773c1b099
msgid "We've seen this before."
msgstr ""

#: ../../src/intro/api.rst:321
# 4dc427a3aa954954b0088e81ec3c8fbb
msgid "The last two lines are curl telling us that it kept the TCP connection it opened in the beginning open for a moment, but then closed it after it received the entire response."
msgstr ""

#: ../../src/intro/api.rst:325
# df6612691e5c4f48b8c367ce537eaac1
msgid "Throughout the book, we'll show more requests with the ``-v`` option, but we'll omit some of the headers we've seen here and include only those that are important for the particular request."
msgstr ""

#: ../../src/intro/api.rst:329
# 767dae88b03645b8a775b6861863ed94
msgid "Creating databases is all fine, but how do we get rid of one? Easy -- just change the HTTP method::"
msgstr ""

#: ../../src/intro/api.rst:334
# c0375c712d1c4e01a5651a301575ff80
msgid "This deletes a CouchDB database. The request will remove the file that the database contents are stored in. There is no *\"Are you sure?\"* safety net or any *\"Empty the trash\"* magic you've got to do to delete a database. Use this command with care. Your data will be deleted without a chance to bring it back easily if you don't have a backup copy."
msgstr ""

#: ../../src/intro/api.rst:340
# 171c9b3e57d9429d80b4b58310a9e47b
msgid "This section went knee-deep into HTTP and set the stage for discussing the rest of the core CouchDB API. Next stop: documents."
msgstr ""

#: ../../src/intro/api.rst:345
# 1ce69f01a3744d079d8e67f4d8fcda04
msgid "Documents"
msgstr ""

#: ../../src/intro/api.rst:350
# 60c99da4d6484e6e891937e048d7f1ab
msgid "Documents are CouchDB's central data structure. The idea behind a document is, unsurprisingly, that of a real-world document -- a sheet of paper such as an invoice, a recipe, or a business card. We already learned that CouchDB uses the JSON format to store documents. Let's see how this storing works at the lowest level."
msgstr ""

#: ../../src/intro/api.rst:356
# e078df569c7d4824b2fde0a54b01ab3b
msgid "Each document in CouchDB has an *ID*. This ID is unique per database. You are free to choose any string to be the ID, but for best results we recommend a `UUID`_ (or `GUID`_), i.e., a Universally (or Globally) Unique IDentifier. UUIDs are random numbers that have such a low collision probability that everybody can make thousands of UUIDs a minute for millions of years without ever creating a duplicate. This is a great way to ensure two independent people cannot create two different documents with the same ID. Why should you care what somebody else is doing? For one, that somebody else could be you at a later time or on a different computer; secondly, CouchDB replication lets you share documents with others and using UUIDs ensures that it all works. But more on that later; let's make some documents::"
msgstr ""

#: ../../src/intro/api.rst:376
# 7409b0b603dc40b1b3224e66c3767adc
msgid "The curl command appears complex, but let's break it down. First, ``-X PUT`` tells curl to make a :method:`PUT` request. It is followed by the URL that specifies your CouchDB IP address and port. The resource part of the URL ``/albums/6e1295ed6c29495e54cc05947f18c8af`` specifies the location of a document inside our albums database. The wild collection of numbers and characters is a UUID. This UUID is your document's ID. Finally, the ``-d`` flag tells curl to use the following string as the body for the :method:`PUT` request. The string is a simple JSON structure including ``title`` and ``artist`` attributes with their respective values."
msgstr ""

#: ../../src/intro/api.rst:389
# c516bc9f26cb408b88e1215d30f694af
msgid "If you don't have a UUID handy, you can ask CouchDB to give you one (in fact, that is what we did just now without showing you). Simply send a :get:`/_uuids` request::"
msgstr ""

#: ../../src/intro/api.rst:401
# 49cdc36e9839480ab548ab71d1453f95
msgid "Voilà, a UUID. If you need more than one, you can pass in the ``?count=10`` HTTP parameter to request 10 UUIDs, or really, any number you need."
msgstr ""

#: ../../src/intro/api.rst:404
# 116bbca161ea4ca899bfa07451cee2c8
msgid "To double-check that CouchDB isn't lying about having saved your document (it usually doesn't), try to retrieve it by sending a GET request::"
msgstr ""

#: ../../src/intro/api.rst:409
# ab270dfec66d4e439791377e143ea4ec
msgid "We hope you see a pattern here. Everything in CouchDB has an address, a URI, and you use the different HTTP methods to operate on these URIs."
msgstr ""

#: ../../src/intro/api.rst:418
# 6225b9f874bc4cb7ab125114e45b328d
msgid "This looks a lot like the document you asked CouchDB to save, which is good. But you should notice that CouchDB added two fields to your JSON structure. The first is ``_id``, which holds the UUID we asked CouchDB to save our document under. We always know the ID of a document if it is included, which is very convenient."
msgstr ""

#: ../../src/intro/api.rst:424
# cac3ca2037764b24b8e45e91d28de55c
msgid "The second field is ``_rev``. It stands for *revision*."
msgstr ""

#: ../../src/intro/api.rst:427
# 0fe16bd839884bd7b433b49fc47450f1
msgid "Revisions"
msgstr ""

#: ../../src/intro/api.rst:429
# 881cbf5163934213b15fb51f8d6e9dae
msgid "If you want to change a document in CouchDB, you don't tell it to go and find a field in a specific document and insert a new value. Instead, you load the full document out of CouchDB, make your changes in the JSON structure (or object, when you are doing actual programming), and save the entire new revision (or version) of that document back into CouchDB. Each revision is identified by a new ``_rev`` value."
msgstr ""

#: ../../src/intro/api.rst:436
# 1b20b53aca71449289980d5fa1303f5b
msgid "If you want to update or delete a document, CouchDB expects you to include the ``_rev`` field of the revision you wish to change. When CouchDB accepts the change, it will generate a new revision number. This mechanism ensures that, in case somebody else made a change without you knowing before you got to request the document update, CouchDB will not accept your update because you are likely to overwrite data you didn't know existed. Or simplified: whoever saves a change to a document first, wins. Let's see what happens if we don't provide a ``_rev`` field (which is equivalent to providing a outdated value)::"
msgstr ""

#: ../../src/intro/api.rst:454
# b06524f09bee44789e39bf405871f218
msgid "If you see this, add the latest revision number of your document to the JSON structure::"
msgstr ""

#: ../../src/intro/api.rst:460
# 921592b686094f63be615135f319b055
msgid "Now you see why it was handy that CouchDB returned that ``_rev`` when we made the initial request. CouchDB replies:"
msgstr ""

#: ../../src/intro/api.rst:467
# 8ff3e1a2d77a4ef687bf653babb08173
msgid "CouchDB accepted your write and also generated a new revision number. The revision number is the *MD5 hash* of the transport representation of a document with an ``N-`` prefix denoting the number of times a document got updated. This is useful for replication. See :ref:`replication/conflicts` for more information."
msgstr ""

#: ../../src/intro/api.rst:473
# a34650fb1fc74ccd8e2e9a91962b2a10
msgid "There are multiple reasons why CouchDB uses this revision system, which is also called Multi-Version Concurrency Control (`MVCC`_). They all work hand-in-hand, and this is a good opportunity to explain some of them."
msgstr ""

#: ../../src/intro/api.rst:479
# 9625d34d91f84683bb98d27393362fd9
msgid "One of the aspects of the HTTP protocol that CouchDB uses is that it is stateless. What does that mean? When talking to CouchDB you need to make requests. Making a request includes opening a network connection to CouchDB, exchanging bytes, and closing the connection. This is done every time you make a request. Other protocols allow you to open a connection, exchange bytes, keep the connection open, exchange more bytes later -- maybe depending on the bytes you exchanged at the beginning -- and eventually close the connection. Holding a connection open for later use requires the server to do extra work. One common pattern is that for the lifetime of a connection, the client has a consistent and static view of the data on the server. Managing huge amounts of parallel connections is a significant amount of work. HTTP connections are usually short-lived, and making the same guarantees is a lot easier. As a result, CouchDB can handle many more concurrent connections."
msgstr ""

#: ../../src/intro/api.rst:493
# 685882648a0247c29abca0863c3b3017
msgid "Another reason CouchDB uses MVCC is that this model is simpler conceptually and, as a consequence, easier to program. CouchDB uses less code to make this work, and less code is always good because the ratio of defects per lines of code is static."
msgstr ""

#: ../../src/intro/api.rst:498
# 225e902944dc4903bcf458ffa46651bf
msgid "The revision system also has positive effects on replication and storage mechanisms, but we'll explore these later in the book."
msgstr ""

#: ../../src/intro/api.rst:503
# 4e70acef4c9442188749e1c5c2aa1dc4
msgid "The terms *version* and *revision* might sound familiar (if you are programming without version control, drop this book right now and start learning one of the popular systems). Using new versions for document changes works a lot like version control, but there's an important difference: **CouchDB does not guarantee that older versions are kept around**."
msgstr ""

#: ../../src/intro/api.rst:511
# 6c1a7a9c7ba14218816ba8090a50359a
msgid "Documents in Detail"
msgstr ""

#: ../../src/intro/api.rst:513
# 8b7ede5e82df4cd08d987ae105af6994
msgid "Now let's have a closer look at our document creation requests with the curl ``-v`` flag that was helpful when we explored the database API earlier. This is also a good opportunity to create more documents that we can use in later examples."
msgstr ""

#: ../../src/intro/api.rst:518
# a74b239b873f47dda0e31894ba14b0e4
msgid "We'll add some more of our favorite music albums. Get a fresh UUID from the ``/_uuids`` resource. If you don't remember how that works, you can look it up a few pages back."
msgstr ""

#: ../../src/intro/api.rst:529
# 1107d586500a41b3a3b747ff7a72a94d
msgid "By the way, if you happen to know more information about your favorite albums, don't hesitate to add more properties. And don't worry about not knowing all the information for all the albums. CouchDB's schema-less documents can contain whatever you know. After all, you should relax and not worry about data."
msgstr ""

#: ../../src/intro/api.rst:535
# 7223809dc1a04c0bbb32fe54e1d0c9a7
msgid "Now with the ``-v`` option, CouchDB's reply (with only the important bits shown) looks like this::"
msgstr ""

#: ../../src/intro/api.rst:546
# 3453fdb183cb4d79b1b2ab39972ac14b
msgid "We're getting back the :statuscode:`201` HTTP status code in the response headers, as we saw earlier when we created a database. The :header:`Location` header gives us a full URL to our newly created document. And there's a new header. An :header:`ETag` in HTTP-speak identifies a specific version of a resource. In this case, it identifies a specific version (the first one) of our new document. Sound familiar? Yes, conceptually, an :header:`ETag` is the same as a CouchDB document revision number, and it shouldn't come as a surprise that CouchDB uses revision numbers for ETags. ETags are useful for caching infrastructures."
msgstr ""

#: ../../src/intro/api.rst:558
# e626f4c24b2d4c58b1ff679dfdffecf0
msgid "Attachments"
msgstr ""

#: ../../src/intro/api.rst:560
# 4a98e123e715497ca1170964fcee8318
msgid "CouchDB documents can have attachments just like an email message can have attachments. An attachment is identified by a name and includes its MIME type (or :header:`Content-Type`) and the number of bytes the attachment contains. Attachments can be any data. It is easiest to think about attachments as files attached to a document. These files can be text, images, Word documents, music, or movie files. Let's make one."
msgstr ""

#: ../../src/intro/api.rst:567
# bd49371ebe634ae5ac6ae7dd9a0a83f8
msgid "Attachments get their own URL where you can upload data. Say we want to add the album artwork to the ``6e1295ed6c29495e54cc05947f18c8af`` document (*\"There is Nothing Left to Lose\"*), and let's also say the artwork is in a file artwork `.jpg` in the current directory::"
msgstr ""

#: ../../src/intro/api.rst:577
# f256780661994adc98aef1c93070abb3
msgid "The ``--data-binary`` ``@`` option tells curl to read a file's contents into the HTTP request body. We're using the ``-H`` option to tell CouchDB that we're uploading a JPEG file. CouchDB will keep this information around and will send the appropriate header when requesting this attachment; in case of an image like this, a browser will render the image instead of offering you the data for download. This will come in handy later. Note that you need to provide the current revision number of the document you're attaching the artwork to, just as if you would update the document. Because, after all, attaching some data is changing the document."
msgstr ""

#: ../../src/intro/api.rst:587
# d95d309438aa4a34876bdb116b224957
msgid "You should now see your artwork image if you point your browser to http://127.0.0.1:5984/albums/6e1295ed6c29495e54cc05947f18c8af/artwork.jpg"
msgstr ""

#: ../../src/intro/api.rst:590
# 5b6fd59bc9a641d1b2eef3510e5caeb2
msgid "If you request the document again, you'll see a new member::"
msgstr ""

#: ../../src/intro/api.rst:613
# 33efd126d1ec4281b80a3e76b3e8ff6a
msgid "``_attachments`` is a list of keys and values where the values are JSON objects containing the attachment metadata. ``stub=true`` tells us that this entry is just the metadata. If we use the ``?attachments=true`` HTTP option when requesting this document, we'd get a `Base64`_ encoded string containing the attachment data."
msgstr ""

#: ../../src/intro/api.rst:621
# a8a4a762972d400b8c5d5be297ed19d2
msgid "We'll have a look at more document request options later as we explore more features of CouchDB, such as replication, which is the next topic."
msgstr ""

#: ../../src/intro/api.rst:626
# 560f43f9d4c440c8a8435d6387be9169
msgid "Replication"
msgstr ""

#: ../../src/intro/api.rst:628
# b317ff35f7734732bf471b747be9d605
msgid "CouchDB replication is a mechanism to synchronize databases. Much like `rsync`_ synchronizes two directories locally or over a network, replication synchronizes two databases locally or remotely."
msgstr ""

#: ../../src/intro/api.rst:634
# 8f2144a02d0c4e3194ff8dcc01a420aa
msgid "In a simple :method:`POST` request, you tell CouchDB the *source* and the *target* of a replication and CouchDB will figure out which documents and new document revisions are on *source* that are not yet on *target*, and will proceed  to move the missing documents and revisions over."
msgstr ""

#: ../../src/intro/api.rst:639
# c7bbb242470846a0860990fe20da0280
msgid "We'll take an in-depth look at replication later in the book; in this chapter, we'll just show you how to use it."
msgstr ""

#: ../../src/intro/api.rst:642
# e9bd34523ead42dcb3ec63ba59e4be14
msgid "First, we'll create a target database. Note that CouchDB won't automatically create a target database for you, and will return a replication failure if the target doesn't exist (likewise for the source, but that mistake isn't as easy to make)::"
msgstr ""

#: ../../src/intro/api.rst:649
# a9a61244a6f24bf99034d507e4c71037
msgid "Now we can use the database `albums-replica` as a replication target::"
msgstr ""

#: ../../src/intro/api.rst:657
# 65d3d0f623d44dc386ab5f4d0d3317a0
msgid "CouchDB supports the option ``\"create_target\":true`` placed in the JSON POSTed to the :ref:`_replicate <api/server/replicate>` URL. It implicitly creates the target database if it doesn't exist."
msgstr ""

#: ../../src/intro/api.rst:661
# 0f98d2bac459475fa2583adc259e6878
msgid "CouchDB replies (this time we formatted the output so you can read it more easily):"
msgstr ""

#: ../../src/intro/api.rst:685
# 49d680568a5843c4a3e1875149573077
msgid "CouchDB maintains a *session history* of replications. The response for a replication request contains the history entry for this *replication session*. It is also worth noting that the request for replication will stay open until replication closes. If you have a lot of documents, it'll take a while until they are all replicated and you won't get back the replication response until all documents are replicated. It is important to note that replication replicates the database only as it was at the point in time when replication was started. So, any additions, modifications, or deletions subsequent to the start of replication will not be replicated."
msgstr ""

#: ../../src/intro/api.rst:695
# 59e44178006a47649a6e947f77fef06e
msgid "We'll punt on the details again -- the ``\"ok\": true`` at the end tells us all went well. If you now have a look at the albums-replica database, you should see all the documents that you created in the albums database. Neat, eh?"
msgstr ""

#: ../../src/intro/api.rst:700
# 4d76c3e4cfad4511a309fca1b33a5c5e
msgid "What you just did is called local replication in CouchDB terms. You created a local copy of a database. This is useful for backups or to keep snapshots of a specific state of your data around for later. You might want to do this if you are developing your applications but want to be able to roll back to a stable version of your code and data."
msgstr ""

#: ../../src/intro/api.rst:706
# b9f9883563f04cc89befb0d1482769f4
msgid "There are more types of replication useful in other situations. The source and target members of our replication request are actually links (like in HTML) and so far we've seen links relative to the server we're working on (hence local). You can also specify a remote database as the target::"
msgstr ""

#: ../../src/intro/api.rst:715
# b41aa768312f44e59a7b172e1c208ff3
msgid "Using a *local source* and a *remote target* database is called *push replication*. We're pushing changes to a remote server."
msgstr ""

#: ../../src/intro/api.rst:720
# 07d1cccd8abd4aefb7df5e565835c682
msgid "Since we don't have a second CouchDB server around just yet, we'll just use the absolute address of our single server, but you should be able to infer from this that you can put any remote server in there."
msgstr ""

#: ../../src/intro/api.rst:724
# d28ad0e67c804213881620f89ade0063
msgid "This is great for sharing local changes with remote servers or buddies next door."
msgstr ""

#: ../../src/intro/api.rst:727
# 92f00795e69e4f9ba9eff06164441f64
msgid "You can also use a *remote source* and a *local target* to do a *pull replication*. This is great for getting the latest changes from a server that is used by others::"
msgstr ""

#: ../../src/intro/api.rst:735
# 31b3625b650c41ac91f2dd17662ad19b
msgid "Finally, you can run remote replication, which is mostly useful for management operations::"
msgstr ""

#: ../../src/intro/api.rst:744
# ac48a157235d4718a432c25c0e72a64d
msgid "**CouchDB and REST**"
msgstr ""

#: ../../src/intro/api.rst:746
# d156ee87984a4c8496aca4b63007ae17
msgid "CouchDB prides itself on having a `RESTful`_ API, but these replication requests don't look very RESTy to the trained eye. What's up with that? While CouchDB's core database, document, and attachment API are RESTful, not all of CouchDB's API is. The replication API is one example. There are more, as we'll see later in the book."
msgstr ""

#: ../../src/intro/api.rst:752
# 0e35847f01e24336936ade5ed5482b19
msgid "Why are there RESTful and non-RESTful APIs mixed up here? Have the developers been too lazy to go REST all the way? Remember, REST is an architectural style that lends itself to certain architectures (such as the CouchDB document API). But it is not a one-size-fits-all. Triggering an event like replication does not make a whole lot of sense in the REST world. It is more like a traditional remote procedure call. And there is nothing wrong with this."
msgstr ""

#: ../../src/intro/api.rst:760
# 3e231791e6fa421d942326752f91ab62
msgid "We very much believe in the \"use the right tool for the job\" philosophy, and REST does not fit every job. For support, we refer to Leonard Richardson and Sam Ruby who wrote `RESTful Web Services`_ (O'Reilly), as they share our view."
msgstr ""

#: ../../src/intro/api.rst:770
# d6f055cd31c5409db865e69d7ae837fd
msgid "Wrapping Up"
msgstr ""

#: ../../src/intro/api.rst:772
# 817e4cd46ac8439ba6213c68972443d9
msgid "This is still not the full CouchDB API, but we discussed the essentials in great detail. We're going to fill in the blanks as we go. For now, we believe you're ready to start building CouchDB applications."
msgstr ""

#: ../../src/intro/api.rst:778
# 66b785af7ad449a482eaac1a414aad09
msgid ":ref:`Complete HTTP API Reference <api>`:"
msgstr ""

#: ../../src/intro/api.rst:780
# cdb52dd2daae4c64b14c890e7ad68e54
msgid ":ref:`Server API Reference <api/server>`"
msgstr ""

#: ../../src/intro/api.rst:781
# 0f73a1b113b74334bd8522c53806d429
msgid ":ref:`Database API Reference <api/database>`"
msgstr ""

#: ../../src/intro/api.rst:782
# 2b291a2195bb4c609ce6ef81d56417df
msgid ":ref:`Document API Reference <api/document>`"
msgstr ""

#: ../../src/intro/api.rst:783
# 51169b52379247da81137f4f18554b3d
msgid ":ref:`Replication API <api/server/replicate>`"
msgstr ""

