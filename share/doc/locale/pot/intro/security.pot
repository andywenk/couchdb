# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013, The Apache Software Foundation
# This file is distributed under the same license as the Apache CouchDB package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Apache CouchDB 1.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-21 23:32\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../src/intro/security.rst:18
# f1c7e18e2f554c0396ad8195aedebdab
msgid "Security"
msgstr ""

#: ../../src/intro/security.rst:20
# 3c95fb6e5f1a45d087c7b766bcd0330f
msgid "In this chapter, we'll look at the basic security mechanisms in CouchDB: the `Admin Party`, `Basic Authentication`, `Cookie Authentication`; how CouchDB handles users and protects their credentials."
msgstr ""

#: ../../src/intro/security.rst:26
# e5fe03f032df411cba365f1f82be08fc
msgid "Authentication"
msgstr ""

#: ../../src/intro/security.rst:31
# 124f45b0602449a3a3975433126fb812
msgid "The Admin Party"
msgstr ""

#: ../../src/intro/security.rst:33
# 902f6e6e6b3b46cea7608bc56f328ece
msgid "When you start out fresh, CouchDB allows any request to be made by anyone. Create a database? No problem, here you go. Delete some documents? Same deal. CouchDB calls this the `Admin Party`. Everybody has privileges to do anything. Neat."
msgstr ""

#: ../../src/intro/security.rst:38
# c1549b8c3f224c74bef294aa1c52d0d5
msgid "While it is incredibly easy to get started with CouchDB that way, it should be obvious that putting a default installation into the wild is adventurous. Any rogue client could come along and delete a database."
msgstr ""

#: ../../src/intro/security.rst:42
# abdf35cbc7ce48dcb718a3ffbd5c829f
msgid "A note of relief: by default, CouchDB will listen only on your loopback network interface (``127.0.0.1`` or ``localhost``) and thus only you will be able to make requests to CouchDB, nobody else. But when you start to open up your CouchDB to the public (that is, by telling it to bind to your machine's public IP address), you will want to think about restricting access so that the next bad guy doesn't ruin your admin party."
msgstr ""

#: ../../src/intro/security.rst:49
# 8742ee9c841a4d1b8972e5b89aed8e17
msgid "In our previous discussions, we dropped some keywords about how things without the `Admin Party` work. First, there's *admin* itself, which implies some sort of super user. Then there are *privileges*. Let's explore these terms a little more."
msgstr ""

#: ../../src/intro/security.rst:54
# 4040adda8fd14914b0d507c0c7051080
msgid "CouchDB has the idea of an *admin user* (e.g. an administrator, a super user, or root) that is allowed to do anything to a CouchDB installation. By default, everybody is an admin. If you don't like that, you can create specific admin users with a username and password as their credentials."
msgstr ""

#: ../../src/intro/security.rst:59
# b676812076104405920f4bb4340c62d2
msgid "CouchDB also defines a set of requests that only admin users are allowed to do. If you have defined one or more specific admin users, CouchDB will ask for identification for certain requests:"
msgstr ""

#: ../../src/intro/security.rst:63
# c0040956bc784e8da0647ff89cb3d7f7
msgid "Creating a database (:put:`PUT /database </{db}>`)"
msgstr ""

#: ../../src/intro/security.rst:64
# 6b63d2f37fda4a61922dc5d02b0a4bcc
msgid "Deleting a database (:put:`DELETE /database </{db}>`)"
msgstr ""

#: ../../src/intro/security.rst:65
# c21e3e04cad74ab3ab1e33c92a6d9bed
msgid "Setup a database security (:put:`PUT /database/_security </{db}/_security>`)"
msgstr ""

#: ../../src/intro/security.rst:67
# 70e0286e35d049d98b8656c2ef403635
msgid "Creating a design document (:put:`PUT /database/_design/app </{db}/_design/{ddocname}>`)"
msgstr ""

#: ../../src/intro/security.rst:69
# f49f8b2aa2024c2682ccf8ed96a15c8d
msgid "Updating a design document (:put:`PUT /database/_design/app?rev=1-4E2 </{db}/_design/{ddocname}>`)"
msgstr ""

#: ../../src/intro/security.rst:71
# c411deffa124489abf08877eaa0f634b
msgid "Deleting a design document (:delete:`DELETE /database/_design/app?rev=2-6A7 </{db}/_design/{ddocname}>`)"
msgstr ""

#: ../../src/intro/security.rst:73
# 2146f522d0f54d2fa6ab4e85afe9284e
msgid "Execute a temporary view (:post:`POST /database/_temp_view </{db}/_temp_view>`)"
msgstr ""

#: ../../src/intro/security.rst:75
# 3cd3d84828c54693b64b5435a626e51e
msgid "Triggering compaction (:post:`POST /database/_compact </{db}/_compact>`)"
msgstr ""

#: ../../src/intro/security.rst:76
# a0945d8d869f4ac89b74a9b8a8dd49ba
msgid "Reading the task status list (:get:`GET /_active_tasks </_active_tasks>`)"
msgstr ""

#: ../../src/intro/security.rst:77
# 42c5b8a19225494989cc75a0d7377c67
msgid "Restarting the server (:post:`:POST /_restart </_restart>`)"
msgstr ""

#: ../../src/intro/security.rst:78
# 5ace0c96cbaa464b8ea56c097e862ecf
msgid "Reading the active configuration (:get:`GET /_config </_config>`)"
msgstr ""

#: ../../src/intro/security.rst:79
# 4129c147c0234d4ba45d4b26a61a4016
msgid "Updating the active configuration (:put:`PUT /_config/section/key </_config/{section}/{key}>`)"
msgstr ""

#: ../../src/intro/security.rst:84
# 9be50d26a06e473a8b6dfce0c1557acf
msgid "Creating New Admin User"
msgstr ""

#: ../../src/intro/security.rst:86
# 8ca06e6c61834e27b0a9dc2e36c068b5
msgid "Let's do another walk through the API using `curl` to see how CouchDB behaves when you add admin users."
msgstr ""

#: ../../src/intro/security.rst:95
# 73c6843898854fc4b8b74b69819cf0e1
msgid "When starting out fresh, we can add a database. Nothing unexpected. Now let's create an admin user. We'll call her ``anna``, and her password is ``secret``. Note the double quotes in the following code; they are needed to denote a string value for the :ref:`configuration API <api/config>`::"
msgstr ""

#: ../../src/intro/security.rst:103
# fc02dc5e8c7d49ce876bebdc11756b3e
msgid "As per the :ref:`_config <api/config>` API's behavior, we're getting the previous value for the config item we just wrote. Since our admin user didn't exist, we get an empty string."
msgstr ""

#: ../../src/intro/security.rst:109
# 370aa34ea3114b43bbf28f27b71ae781
msgid "Hashing Passwords"
msgstr ""

#: ../../src/intro/security.rst:111
# 8d1d421f866b424f840c458eb86a7e72
msgid "Seeing the plain-text password is scary, isn't it? No worries, CouchDB doesn't show up the plain-text password anywhere. It gets hashed right away. The hash is that big, ugly, long string that starts out with ``-hashed-``. How does that work?"
msgstr ""

#: ../../src/intro/security.rst:116
# e790dcf536e24207886de813b20c918b
msgid "Creates a new 128-bit UUID. This is our *salt*."
msgstr ""

#: ../../src/intro/security.rst:117
# 7a727d838b0b4dd0859c8bbdb8422074
msgid "Creates a sha1 hash of the concatenation of the bytes of the plain-text password and the salt ``(sha1(password + salt))``."
msgstr ""

#: ../../src/intro/security.rst:119
# f471983d33c24a6898e4154830cf1f2f
msgid "Prefixes the result with ``-hashed-`` and appends ``,salt``."
msgstr ""

#: ../../src/intro/security.rst:121
# be404cda76a34c46b779531c5f998bb4
msgid "To compare a plain-text password during authentication with the stored hash, the same procedure is run and the resulting hash is compared to the stored hash. The probability of two identical hashes for different passwords is too insignificant to mention (c.f. `Bruce Schneier`_). Should the stored hash fall into the hands of an attacker, it is, by current standards, way too inconvenient (i.e., it'd take a lot of money and time) to find the plain-text password from the hash."
msgstr ""

#: ../../src/intro/security.rst:131
# 04c80ae929ee422980c5ae9430a7e8d1
msgid "But what's with the ``-hashed-`` prefix? When CouchDB starts up, it reads a set of `.ini` files with config settings. It loads these settings into an internal data store (not a database). The config API lets you read the current configuration as well as change it and create new entries. CouchDB is writing any changes back to the `.ini` files."
msgstr ""

#: ../../src/intro/security.rst:137
# 11753af636974df1b906318c1a39312c
msgid "The `.ini` files can also be edited by hand when CouchDB is not running. Instead of creating the admin user as we showed previously, you could have stopped CouchDB, opened your `local.ini`, added ``anna = secret`` to the :config:section:`admins`, and restarted CouchDB. Upon reading the new line from `local.ini`, CouchDB would run the hashing algorithm and write back the hash to `local.ini`, replacing the plain-text password. To make sure CouchDB only hashes plain-text passwords and not an existing hash a second time, it prefixes the hash with ``-hashed-``, to distinguish between plain-text passwords and hashed passwords. This means your plain-text password can't start with the characters ``-hashed-``, but that's pretty unlikely to begin with."
msgstr ""

#: ../../src/intro/security.rst:150
# 631c3afb12b94d2e97446894ce6289be
msgid "Since :ref:`1.3.0 release <release/1.3.0>` CouchDB uses ``-pbkdf2-`` prefix by default to sign about using `PBKDF2`_ hashing algorithm instead of `SHA1`."
msgstr ""

#: ../../src/intro/security.rst:159
# 8e99752bd9d4490a9ba91ad27cebd079
msgid "Basic Authentication"
msgstr ""

#: ../../src/intro/security.rst:161
# 1ff804d322a54c1d8384ffabcabe6775
msgid "Now that we have defined an admin, CouchDB will not allow us to create new databases unless we give the correct admin user credentials. Let's verify::"
msgstr ""

#: ../../src/intro/security.rst:167
# dd78b13b2d7740659a9be30f89f5a904
msgid "That looks about right. Now we try again with the correct credentials::"
msgstr ""

#: ../../src/intro/security.rst:173
# fcd04c06e28f402fa08f29b3aeee90f7
msgid "If you have ever accessed a website or FTP server that was password-protected, the ``username:password@`` URL variant should look familiar."
msgstr ""

#: ../../src/intro/security.rst:176
# 56ab6679ff584ee6b359df3404d06db4
msgid "If you are security conscious, the missing ``s`` in ``http://`` will make you nervous. We're sending our password to CouchDB in plain text. This is a bad thing, right? Yes, but consider our scenario: CouchDB listens on ``127.0.0.1`` on a development box that we're the sole user of. Who could possibly sniff our password?"
msgstr ""

#: ../../src/intro/security.rst:182
# 4d265bbb98094e378a5c19d401b5d341
msgid "If you are in a production environment, however, you need to reconsider. Will your CouchDB instance communicate over a public network? Even a LAN shared with other collocation customers is public. There are multiple ways to secure communication between you or your application and CouchDB that exceed the scope of this documentation. CouchDB as of version :ref:`1.1.0 <release/1.1.0>` comes with :ref:`SSL built in <config/ssl>`."
msgstr ""

#: ../../src/intro/security.rst:191
# 7c88f71a441846c6a7d1fbffafcf4211
msgid ":ref:`Basic Authentication API Reference <api/auth/basic>`"
msgstr ""

#: ../../src/intro/security.rst:197
# ac7a22d121ad4e37b6dfd5ac9f82d273
msgid "Cookie Authentication"
msgstr ""

#: ../../src/intro/security.rst:199
# 2e93aa97265e43d8ab039c04ed34065b
msgid "Basic authentication that uses plain-text passwords is nice and convenient, but not very secure if no extra measures are taken. It is also a very poor user experience. If you use basic authentication to identify admins, your application's users need to deal with an ugly, unstylable browser modal dialog that says non-professional at work more than anything else."
msgstr ""

#: ../../src/intro/security.rst:205
# c8d734f5cf7c4d7cb861a61fbf6724b6
msgid "To remedy some of these concerns, CouchDB supports cookie authentication. With cookie authentication your application doesn't have to include the ugly login dialog that the users' browsers come with. You can use a regular HTML form to submit logins to CouchDB. Upon receipt, CouchDB will generate a one-time token that the client can use in its next request to CouchDB. When CouchDB sees the token in a subsequent request, it will authenticate the user based on the token without the need to see the password again. By default, a token is valid for 10 minutes."
msgstr ""

#: ../../src/intro/security.rst:214
# 81661c8e54f647e0ae544c6b0afbd272
msgid "To obtain the first token and thus authenticate a user for the first time, the username and password must be sent to the :ref:`_session <api/auth/session>` API. The API is smart enough to decode HTML form submissions, so you don't have to resort to any smarts in your application."
msgstr ""

#: ../../src/intro/security.rst:219
# f8fd1247cd4941a5a9d80f4a6aa474c2
msgid "If you are not using HTML forms to log in, you need to send an HTTP request that looks as if an HTML form generated it. Luckily, this is super simple::"
msgstr ""

#: ../../src/intro/security.rst:227
# 1b25852e791a44c7b2c5eb3c17a676d6
msgid "CouchDB replies, and we'll give you some more detail::"
msgstr ""

#: ../../src/intro/security.rst:236
# f69f5fdae36b47a6afefa31188ea45e5
msgid "A :statuscode:`200` response code tells us all is well, a :header:`Set-Cookie` header includes the token we can use for the next request, and the standard JSON response tells us again that the request was successful."
msgstr ""

#: ../../src/intro/security.rst:240
# d2b7a111ec5d4d43bcb31eb2f060c3ac
msgid "Now we can use this token to make another request as the same user without sending the username and password again::"
msgstr ""

#: ../../src/intro/security.rst:249
# f1a522884aa648b58d68f2a16214c27d
msgid "You can keep using this token for 10 minutes by default. After 10 minutes you need to authenticate your user again. The token lifetime can be configured with the timeout (in seconds) setting in the :ref:`couch_httpd_auth <config/couch_httpd_auth>` configuration section."
msgstr ""

#: ../../src/intro/security.rst:256
# 93321281df2d40e79059c21ffb6d6900
msgid ":ref:`Cookie Authentication API Reference <api/auth/cookie>`"
msgstr ""

#: ../../src/intro/security.rst:261
# 21358cbc51484ef8a5c26979b917a14d
msgid "Authentication Database"
msgstr ""

#: ../../src/intro/security.rst:263
# e11711c0bf284f08ba8c34f6f7257071
msgid "You may already note, that CouchDB administrators are defined within config file and you now wondering does regular users are also stored there. No, they don't. CouchDB has special `authentication database` -- ``_users`` by default -- that stores all registered users as JSON documents."
msgstr ""

#: ../../src/intro/security.rst:268
# 836c19fd0e934b6ca269d83f6f158a8e
msgid "CouchDB uses special database (called ``_users`` by default) to store information about registered users. This is a `system database` -- this means that while it shares common :ref:`database API <api/database>`, there are some special security-related constraints applied and used agreements on documents structure. So how `authentication database` is different from others?"
msgstr ""

#: ../../src/intro/security.rst:274
# 2f342c430b9146b9aef13d7701c60bbb
msgid "Only administrators may browse list of all documents (:get:`GET /_users/_all_docs </{db}/_all_docs>`)"
msgstr ""

#: ../../src/intro/security.rst:276
# eae03910464e46ea80c17b534beff29f
msgid "Only administrators may listen :ref:`changes feed <changes>` (:get:`GET /_users/_changes </{db}/_changes>`)"
msgstr ""

#: ../../src/intro/security.rst:278
# 47214e68f4124cd692c7021ecabd3256
msgid "Only administrators may execute design functions like :ref:`views <viewfun>`, :ref:`shows <showfun>` and :ref:`others <ddocs>`"
msgstr ""

#: ../../src/intro/security.rst:280
# bccf429745824592906d4d4dea51fccf
msgid "Only administrators may :method:`GET`, :method:`PUT` or :method:`DELETE` any document (to be honest, that they always can do)"
msgstr ""

#: ../../src/intro/security.rst:282
# 5c4e789936b448f48d0e88764cd5b716
msgid "There is special design document ``_auth`` that cannot be modified"
msgstr ""

#: ../../src/intro/security.rst:283
# 286fa4404b5d4fd59547e45a16b5b47e
msgid "Every document (of course, except `design documents`) represents registered CouchDB users and belong to him"
msgstr ""

#: ../../src/intro/security.rst:285
# 7a5ae2661f0f429493b86700999aff72
msgid "Users may only access (:get:`GET /_users/org.couchdb.user:Jan </{db}/{docid}>`) or modify (:put:`PUT /_users/org.couchdb.user:Jan </{db}/{docid}>`) documents that they owns"
msgstr ""

#: ../../src/intro/security.rst:289
# a6a3470444a84d4f84d8a9cdeebfc2b0
msgid "These draconian rules are reasonable: CouchDB cares about user's personal information and doesn't discloses it for everyone. Often, users documents are contains not only system information like `login`, `password hash` and `roles`, but also sensitive personal information like: real name, email, phone, special internal identifications and more - this is not right information that you want to share with the World."
msgstr ""

#: ../../src/intro/security.rst:298
# a9a8f26946934090b1dc602fbbe55afb
msgid "Users Documents"
msgstr ""

#: ../../src/intro/security.rst:300
# 1a2e4d8dc84d4271ae05ad8c159763fb
msgid "Each CouchDB user is stored in document format. These documents are contains several *mandatory* fields, that CouchDB handles for correct authentication process:"
msgstr ""

#: ../../src/intro/security.rst:304
# 73682628134147379543301d5dc372ad
msgid "**_id** (*string*): Document ID. Contains user's login with special prefix :ref:`org.couchdb.user`"
msgstr ""

#: ../../src/intro/security.rst:306
# b5aac5636fc74866952bb0258c3c0d75
msgid "**derived_key** (*string*): `PBKDF2`_ key"
msgstr ""

#: ../../src/intro/security.rst:307
# 04ab5da01b284bdabc331d4c103b37e8
msgid "**name** (*string*): User's name aka login. **Immutable** e.g. you cannot rename existed user - you have to create new one"
msgstr ""

#: ../../src/intro/security.rst:309
# 2ee50b41d731426984dfa57f39dd451f
msgid "**roles** (*array* of *string*): List of user roles. CouchDB doesn't provides any builtin roles, so you're free to define your own depending on your needs. However, you cannot set system roles like ``_admin`` there. Also, only administrators may assign roles to users - by default all users have no roles"
msgstr ""

#: ../../src/intro/security.rst:313
# 18eaec83dd4b44ce974b9bf21fa4d7df
msgid "**password_sha** (*string*): Hashed password with salt. Used for ``simple`` `password_scheme`"
msgstr ""

#: ../../src/intro/security.rst:315
# b4b0ffbc82dd446ba0f2c9f752b10d44
msgid "**password_scheme** (*string*): Password hashing scheme. May be ``simple`` or ``pbkdf2``"
msgstr ""

#: ../../src/intro/security.rst:317
# d92ed9d16fb545119e693635ad5f22c1
msgid "**salt** (*string*): Hash salt. Used for ``simple`` `password_scheme`"
msgstr ""

#: ../../src/intro/security.rst:318
# 197a0bf5e79e457386d5fc735b5675bb
msgid "**type** (*string*): Document type. Constantly have value ``user``"
msgstr ""

#: ../../src/intro/security.rst:320
# 6d21e0765bed47618d3dd51b3b4f651d
msgid "Additionally, you may specify any custom fields that are relates to the target user. This is good place to store user's private information because only he and CouchDB administrators may browse it."
msgstr ""

#: ../../src/intro/security.rst:327
# c35e0ed69d9640b78be24e0f460a2d6d
msgid "Why ``org.couchdb.user:`` prefix?"
msgstr ""

#: ../../src/intro/security.rst:329
# 83e40d3a3fdb497a9ce4e794f207cb59
msgid "The reason to have special prefix before user's login name is to have namespaces which users are belongs to. This prefix is designed to prevent replication conflicts when you'll try to merge two `_user` databases or more."
msgstr ""

#: ../../src/intro/security.rst:333
# 8b8d92b4cc6e4b858feb73be178a6945
msgid "For current CouchDB releases, all users are belongs to the same ``org.couchdb.user`` namespace and this cannot be changed, but we'd made such design decision for future releases."
msgstr ""

#: ../../src/intro/security.rst:339
# 57d7cd0046e64b3fb772d7d3661af332
msgid "Creating New User"
msgstr ""

#: ../../src/intro/security.rst:341
# 2cfc59e9b0924ab8b1fc5e588922012b
msgid "Creating new user is a very trivial operation. You need just to send single :method:`PUT` request with user's data to CouchDB. Let's create user with login `jan` and password `apple`::"
msgstr ""

#: ../../src/intro/security.rst:350
# b7566e36e9a54110997efd3fd247f8e3
msgid "This `curl` command will produce next HTTP request:"
msgstr ""

#: ../../src/intro/security.rst:361
# cf89782136eb4fb1be7037160f15178a
msgid "And CouchDB responds with:"
msgstr ""

#: ../../src/intro/security.rst:376
# 863efb02ad32420aaf849a3eac6ab04d
msgid "Document successfully created what also means that user `jan` have created too! Let's check is this true::"
msgstr ""

#: ../../src/intro/security.rst:381
#: ../../src/intro/security.rst:450
#: ../../src/intro/security.rst:462
# ab4c75959d0141d2ab0bf5471015170f
# 626608eb705c4457be65867624f8cc4a
# 4ca2288660ed470faa014a06d76f37f9
msgid "CouchDB should respond with:"
msgstr ""

#: ../../src/intro/security.rst:387
# f12bf9f642d242439d7f2466fa047e57
msgid "Which means that username was recognized and password's hash matches with stored one. If we specify wrong login and/or password, CouchDB will notify us with the next error message:"
msgstr ""

#: ../../src/intro/security.rst:397
# 89c5c8237d6a48609534881e3d54884d
msgid "Password Changing"
msgstr ""

#: ../../src/intro/security.rst:399
# f64db480bd464b768862696665d3063e
msgid "This is quite common situation: user had forgot his password, it was leaked somehow (via copy-paste, screenshot, or by typing in wrong chat window) or something else. Let's change password for our user `jan`."
msgstr ""

#: ../../src/intro/security.rst:403
# eda545c8ca0c43a0b388fbf16418b18a
msgid "First of all, let's define what is the password changing from the point of CouchDB and the authentication database. Since \"users\" are \"documents\", this operation is nothing, but updating the document with special field ``password`` which contains the *plain text password*. Scared? No need to: the authentication database has special internal hook on  document update which looks for this field and replaces it with the *secured hash*, depending on chosen ``password_scheme``."
msgstr ""

#: ../../src/intro/security.rst:411
# f0ceaa81885f418c9339cb8e56102ec0
msgid "Summarizing above, we need to get document content, add ``password`` field with new plain text password value and store JSON result to the authentication database."
msgstr ""

#: ../../src/intro/security.rst:433
# b403dfd5baef476b80ae62282aa1d82e
msgid "Here is our user's document. We may strip hashes from stored document to reduce amount of posted data::"
msgstr ""

#: ../../src/intro/security.rst:446
# 69df618960ba473a8b60616382bd8ac0
msgid "Updated! Now let's check that password was really changed::"
msgstr ""

#: ../../src/intro/security.rst:456
# f6cbd8064bdf418fb533c1d069df52cf
msgid "Looks like the password ``apple`` is wrong, what about ``orange``?"
msgstr ""

#: ../../src/intro/security.rst:468
# 85dde88d85e64daea5a9a886673e0619
msgid "Hooray! You may wonder why so complex: need to retrieve user's document, add special field to him, post it back - where is one big button that changes the password without worry about document's content? Actually, :ref:`Futon <intro/futon>` has such at the right bottom corner if you have logged in - all implementation details are hidden from your sight."
msgstr ""

#: ../../src/intro/security.rst:476
# 66ec55d27bd74696a31878783463feea
msgid "There is no password confirmation for API request: you should implement it on your application layer like Futon does."
msgstr ""

#: ../../src/intro/security.rst:481
# e8eb2485bd0c4236ac9848854aad8e2e
msgid "Users Public Information"
msgstr ""

#: ../../src/intro/security.rst:485
# 2e5ce3b104b64b4f81cf09da24237a96
msgid "Sometimes users *wants* to share some information with the World. For instance, their contact email to let other users get in touch with him. To solve this problem, but still keep sensitive and private information secured there is special :ref:`configuration <config>` option :config:option:`public_fields <couch_httpd_auth/public_fields>`. In this options you may define comma separated list of users document fields that will be publicity available."
msgstr ""

#: ../../src/intro/security.rst:492
# 2a1a50d4a21f444c873132f91923bac1
msgid "Normally, if you request any user's document and you're not administrator or this document owner, CouchDB will respond with :statuscode:`404`::"
msgstr ""

#: ../../src/intro/security.rst:501
# 4db3677e6fc242958d8bafc15c68920b
msgid "This response is constant for both cases when user exists or not exists - by security reasons."
msgstr ""

#: ../../src/intro/security.rst:504
# 444ab155afa8493eaac9dd7793f24ec8
msgid "Now let's share field ``name``. First, setup the ``public_fields`` configuration option. Remember, that this action requires administrator's privileges and the next command will ask for password for user `admin`, assuming that he is the server administrator::"
msgstr ""

#: ../../src/intro/security.rst:514
# 895406de08bb46c28d08e0c005d67a45
msgid "What have changed? Let's check Robert's document once again::"
msgstr ""

#: ../../src/intro/security.rst:522
# c6d3351ba84d45e3af2c268f888f00d1
msgid "Good news! Now we may read field ``name`` from *every user's document without need to be an administrator*. That's important note: don't publish sensitive information, especially without user's acknowledge - they may not like such actions from your side."
msgstr ""

