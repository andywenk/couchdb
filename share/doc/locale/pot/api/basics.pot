# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013, The Apache Software Foundation
# This file is distributed under the same license as the Apache CouchDB package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Apache CouchDB 1.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-21 23:32\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../src/api/basics.rst:17
# 3684f426e97f47d4946fd5dd04e647ed
msgid "API Basics"
msgstr ""

#: ../../src/api/basics.rst:19
# a3edbc5bef374d588b525539b98179e8
msgid "The CouchDB API is the primary method of interfacing to a CouchDB instance. Requests are made using HTTP and requests are used to request information from the database, store new data, and perform views and formatting of the information stored within the documents."
msgstr ""

#: ../../src/api/basics.rst:24
# 2032aa85d2b744d8a9a1645732589aae
msgid "Requests to the API can be categorised by the different areas of the CouchDB system that you are accessing, and the HTTP method used to send the request. Different methods imply different operations, for example retrieval of information from the database is typically handled by the ``GET`` operation, while updates are handled by either a ``POST`` or ``PUT`` request. There are some differences between the information that must be supplied for the different methods. For a guide to the basic HTTP methods and request structure, see :ref:`api/format`."
msgstr ""

#: ../../src/api/basics.rst:33
# f9b84c89e28241788ca4d5e2338f8b13
msgid "For nearly all operations, the submitted data, and the returned data structure, is defined within a JavaScript Object Notation (JSON) object. Basic information on the content and data types for JSON are provided in :ref:`json`."
msgstr ""

#: ../../src/api/basics.rst:38
# cc25324613334fa18a101ac408d856a2
msgid "Errors when accessing the CouchDB API are reported using standard HTTP Status Codes. A guide to the generic codes returned by CouchDB are provided in :ref:`errors`."
msgstr ""

#: ../../src/api/basics.rst:42
# dafab6170ad24855b83be858efe84c85
msgid "When accessing specific areas of the CouchDB API, specific information and examples on the HTTP methods and request, JSON structures, and error codes are provided."
msgstr ""

#: ../../src/api/basics.rst:49
# bb8e2f270b754c489b52001dcacc3697
msgid "Request Format and Responses"
msgstr ""

#: ../../src/api/basics.rst:51
# 783a53ab6c70486d94fd161fcd35c142
msgid "CouchDB supports the following HTTP request methods:"
msgstr ""

#: ../../src/api/basics.rst:53
# c9f7d99f23904c76ac3a9162b407fd76
msgid "``GET``"
msgstr ""

#: ../../src/api/basics.rst:55
# 807dd691ffb544e682c2d6c280f61e7f
msgid "Request the specified item. As with normal HTTP requests, the format of the URL defines what is returned. With CouchDB this can include static items, database documents, and configuration and statistical information. In most cases the information is returned in the form of a JSON document."
msgstr ""

#: ../../src/api/basics.rst:61
# e2952ca4dfbe479eaa84657912dca3a2
msgid "``HEAD``"
msgstr ""

#: ../../src/api/basics.rst:63
# 18d1d6602bde4e00903aa53c54ffc737
msgid "The ``HEAD`` method is used to get the HTTP header of a ``GET`` request without the body of the response."
msgstr ""

#: ../../src/api/basics.rst:66
# 3c6d133defaf4f53aa05102b83830a85
msgid "``POST``"
msgstr ""

#: ../../src/api/basics.rst:68
# 716e5940299a415fbade0ca6d6fe354b
msgid "Upload data. Within CouchDB ``POST`` is used to set values, including uploading documents, setting document values, and starting certain administration commands."
msgstr ""

#: ../../src/api/basics.rst:72
# c7b56b4cd23d49fba04d40929ab3649e
msgid "``PUT``"
msgstr ""

#: ../../src/api/basics.rst:74
# d678a22c63cd4102beb07f09fbfef9f2
msgid "Used to put a specified resource. In CouchDB ``PUT`` is used to create new objects, including databases, documents, views and design documents."
msgstr ""

#: ../../src/api/basics.rst:78
# c52d37b0071c40fe8722db37a7f0b77f
msgid "``DELETE``"
msgstr ""

#: ../../src/api/basics.rst:80
# 88525452182d43ee840d8f071222e577
msgid "Deletes the specified resource, including documents, views, and design documents."
msgstr ""

#: ../../src/api/basics.rst:83
# 3e3e2eecb7864afc97d990e518a9b937
msgid "``COPY``"
msgstr ""

#: ../../src/api/basics.rst:85
# 9201cfa643ae4881bfa55042162be517
msgid "A special method that can be used to copy documents and objects."
msgstr ""

#: ../../src/api/basics.rst:87
# 3a664e463c1043919f82b3da8fc0077c
msgid "If you use the an unsupported HTTP request type with a URL that does not support the specified type, a 405 error will be returned, listing the supported HTTP methods. For example:"
msgstr ""

#: ../../src/api/basics.rst:99
# 267f519aa6ff44f28dec9dd403ac2b43
msgid "The CouchDB design document API and the functions when returning HTML (for example as part of a show or list) enables you to include custom HTTP headers through the ``headers`` block of the return object."
msgstr ""

#: ../../src/api/basics.rst:104
# 2ff81a6e2dcb492fb902941c7ad7d16c
msgid "HTTP Headers"
msgstr ""

#: ../../src/api/basics.rst:106
# 2eef9313012b4444a74ec5190295fbec
msgid "Because CouchDB uses HTTP for all communication, you need to ensure that the correct HTTP headers are supplied (and processed on retrieval) so that you get the right format and encoding. Different environments and clients will be more or less strict on the effect of these HTTP headers (especially when not present). Where possible you should be as specific as possible."
msgstr ""

#: ../../src/api/basics.rst:114
# ac04a2304ee9470dafb060a2b20cfc77
msgid "Request Headers"
msgstr ""

#: ../../src/api/basics.rst:116
#: ../../src/api/basics.rst:199
# e3da80337514451aaa848ae77e848c72
# a0a21050f4cf4c75b21533b7ebeeff08
msgid "``Content-type``"
msgstr ""

#: ../../src/api/basics.rst:118
# 6ce2763ef68746ce8450983c8b67a846
msgid "Specifies the content type of the information being supplied within the request. The specification uses MIME type specifications. For the majority of requests this will be JSON (``application/json``). For some settings the MIME type will be plain text. When uploading attachments it should be the corresponding MIME type for the attachment or binary (``application/octet-stream``)."
msgstr ""

#: ../../src/api/basics.rst:125
# 21128d76d052472b8f7d65cd56edab09
msgid "The use of the ``Content-type`` on a request is highly recommended."
msgstr ""

#: ../../src/api/basics.rst:127
# 91e08526b050444fa45f1177a572de90
msgid "``Accept``"
msgstr ""

#: ../../src/api/basics.rst:129
# 1227bacc9d5d44fb8c7fc927cd40ff9c
msgid "Specifies the list of accepted data types to be returned by the server (i.e. that are accepted/understandable by the client). The format should be a list of one or more MIME types, separated by colons."
msgstr ""

#: ../../src/api/basics.rst:134
# 99d25629857c471094ac255e38ae5473
msgid "For the majority of requests the definition should be for JSON data (``application/json``). For attachments you can either specify the MIME type explicitly, or use ``*/*`` to specify that all file types are supported. If the ``Accept`` header is not supplied, then the ``*/*`` MIME type is assumed (i.e. client accepts all formats)."
msgstr ""

#: ../../src/api/basics.rst:140
# 9f5447a9968f40dc84d0d0d524f5be83
msgid "The use of ``Accept`` in queries for CouchDB is not required, but is highly recommended as it helps to ensure that the data returned can be processed by the client."
msgstr ""

#: ../../src/api/basics.rst:144
# e4e814069c4f43f7861a6ff5109bc549
msgid "If you specify a data type using the ``Accept`` header, CouchDB will honor the specified type in the ``Content-type`` header field returned. For example, if you explicitly request ``application/json`` in the ``Accept`` of a request, the returned HTTP headers will use the value in the returned ``Content-type`` field."
msgstr ""

#: ../../src/api/basics.rst:150
# d45d04de96694525af920922ed24d64e
msgid "For example, when sending a request without an explicit ``Accept`` header, or when specifying ``*/*``:"
msgstr ""

#: ../../src/api/basics.rst:159
# cd11510622974c13abef5f274969997d
msgid "The returned headers are:"
msgstr ""

#: ../../src/api/basics.rst:169
# 0e8df92a86c34d15b89552c5d000948f
msgid "Note that the returned content type is ``text/plain`` even though the information returned by the request is in JSON format."
msgstr ""

#: ../../src/api/basics.rst:172
# 4b7ea26c5478459bacddd45add9f435f
msgid "Explicitly specifying the ``Accept`` header:"
msgstr ""

#: ../../src/api/basics.rst:180
# 304abe38208e448c8e0ff9b5b8f66d4b
msgid "The headers returned include the ``application/json`` content type:"
msgstr ""

#: ../../src/api/basics.rst:191
# d0524943c2be45569b0b9faa8a56a20d
msgid "Response Headers"
msgstr ""

#: ../../src/api/basics.rst:193
# d2a9e3690ede49be9aea3f26547e4743
msgid "Response headers are returned by the server when sending back content and include a number of different header fields, many of which are standard HTTP response header and have no significance to CouchDB operation. The list of response headers important to CouchDB are listed below."
msgstr ""

#: ../../src/api/basics.rst:201
# 09cf2b33a06d40d9ad631d49da327fff
msgid "Specifies the MIME type of the returned data. For most request, the returned MIME type is ``text/plain``. All text is encoded in Unicode (UTF-8), and this is explicitly stated in the returned ``Content-type``, as ``text/plain;charset=utf-8``."
msgstr ""

#: ../../src/api/basics.rst:206
# 33bbb9a33878411ba7d29922fc6b2761
msgid "``Cache-control``"
msgstr ""

#: ../../src/api/basics.rst:208
# 48caffbc544e4347ac5aa6006b7ad332
msgid "The cache control HTTP response header provides a suggestion for client caching mechanisms on how to treat the returned information. CouchDB typically returns the ``must-revalidate``, which indicates that the information should be revalidated if possible. This is used to ensure that the dynamic nature of the content is correctly updated."
msgstr ""

#: ../../src/api/basics.rst:215
# 017b6b1d52d34740aa615762fdb17c96
msgid "``Content-length``"
msgstr ""

#: ../../src/api/basics.rst:217
# 75878c6855fc49c7a776b1d7fb6d0b9a
msgid "The length (in bytes) of the returned content."
msgstr ""

#: ../../src/api/basics.rst:219
# 0e484a59e83849febe1409353eb9da5a
msgid "``Etag``"
msgstr ""

#: ../../src/api/basics.rst:221
# c8c4626370a446dabe70420e19aacbea
msgid "The ``Etag`` HTTP header field is used to show the revision for a document, or a view."
msgstr ""

#: ../../src/api/basics.rst:224
# 93b0cdfbb17448ac9d42fdc418cacb3d
msgid "ETags have been assigned to a map/reduce group (the collection of views in a single design document). Any change to any of the indexes for those views would generate a new ETag for all view URLs in a single design doc, even if that specific view's results had not changed."
msgstr ""

#: ../../src/api/basics.rst:230
# eeea4f2dddd7452fb38a6cc8d1869549
msgid "Each ``_view`` URL has its own ETag which only gets updated when changes are made to the database that effect that index. If the index for that specific view does not change, that view keeps the original ETag head (therefore sending back 304 Not Modified more often)."
msgstr ""

#: ../../src/api/basics.rst:239
# 6cda52bd521c4fceaef4c49564f7ce5d
msgid "JSON Basics"
msgstr ""

#: ../../src/api/basics.rst:241
# f079e56beed54df1a6f3e9eca36d2a2f
msgid "The majority of requests and responses to CouchDB use the JavaScript Object Notation (JSON) for formatting the content and structure of the data and responses."
msgstr ""

#: ../../src/api/basics.rst:245
# ab4e09843e2b4cbaa2bbcd266b749f62
msgid "JSON is used because it is the simplest and easiest to use solution for working with data within a web browser, as JSON structures can be evaluated and used as JavaScript objects within the web browser environment. JSON also integrates with the server-side JavaScript used within CouchDB."
msgstr ""

#: ../../src/api/basics.rst:251
# 9ab550cfa29e47b48762ad8580e1af4e
msgid "JSON supports the same basic types as supported by JavaScript, these are:"
msgstr ""

#: ../../src/api/basics.rst:254
# a3a016e8cd894738a5599d9e8938fafb
msgid "Number (either integer or floating-point)."
msgstr ""

#: ../../src/api/basics.rst:256
# ad5d5a7bd960467c878d5a2dd090ca72
msgid "String; this should be enclosed by double-quotes and supports Unicode characters and backslash escaping. For example:"
msgstr ""

#: ../../src/api/basics.rst:263
# 0adb2fb5eeae484b853d8f2150a075ed
msgid "Boolean - a ``true`` or ``false`` value. You can use these strings directly. For example:"
msgstr ""

#: ../../src/api/basics.rst:270
# 074e1918bba44772b4e20d58cb9d5f9e
msgid "Array - a list of values enclosed in square brackets. For example:"
msgstr ""

#: ../../src/api/basics.rst:276
# 85e5ffab6255419dacaddae26bc5bab5
msgid "Object - a set of key/value pairs (i.e. an associative array, or hash). The key must be a string, but the value can be any of the supported JSON values. For example:"
msgstr ""

#: ../../src/api/basics.rst:290
# beb719bac04b4e6b894cd01af7ada6c3
msgid "In CouchDB, the JSON object is used to represent a variety of structures, including the main CouchDB document."
msgstr ""

#: ../../src/api/basics.rst:293
# 0f927f585fe14df6ab4b89b817900264
msgid "Parsing JSON into a JavaScript object is supported through the ``JSON.parse()`` function in JavaScript, or through various libraries that will perform the parsing of the content into a JavaScript object for you. Libraries for parsing and generating JSON are available in many languages, including Perl, Python, Ruby, Erlang and others."
msgstr ""

#: ../../src/api/basics.rst:300
# c50e788fc5dd46cd9878eb56c3109e1f
msgid "Care should be taken to ensure that your JSON structures are valid, invalid structures will cause CouchDB to return an HTTP status code of 500 (server error)."
msgstr ""

#: ../../src/api/basics.rst:308
# d8f8d71329784b1ca8f6bca6edd4066b
msgid "Number Handling"
msgstr ""

#: ../../src/api/basics.rst:310
# 3622bf7f61ae4a11a8bd8be7c83736b9
msgid "Developers and users new to computer handling of numbers often encounter suprises when expecting that a number stored in JSON format does not necessarily return as the same number as compared character by character."
msgstr ""

#: ../../src/api/basics.rst:314
# 98fb9e25ea6948589b49971af1481b89
msgid "Any numbers defined in JSON that contain a decimal point or exponent will be passed through the Erlang VM's idea of the \"double\" data type. Any numbers that are used in views will pass through the view server's idea of a number (the common JavaScript case means even integers pass through a double due to JavaScript's definition of a number)."
msgstr ""

#: ../../src/api/basics.rst:320
# f31a80a33eb741b2b270e11c4f4b6e0c
msgid "Consider this document that we write to CouchDB:"
msgstr ""

#: ../../src/api/basics.rst:329
# 7e7f0a7045a84b6598889ec0a9a027de
msgid "Now let’s read that document back from CouchDB:"
msgstr ""

#: ../../src/api/basics.rst:340
# 335c7a83dc4749e99c483b77434c7efb
msgid "What happens is CouchDB is changing the textual representation of the result of decoding what it was given into some numerical format. In most cases this is an `IEEE 754`_ double precision floating point number which is exactly what almost all other languages use as well."
msgstr ""

#: ../../src/api/basics.rst:347
# 1ed65c2d1dc943bf8c6e5154a4a2dc2f
msgid "What Erlang does a bit differently than other languages is that it does not attempt to pretty print the resulting output to use the shortest number of characters. For instance, this is why we have this relationship:"
msgstr ""

#: ../../src/api/basics.rst:357
# 2e21a67ab6d04fe39ad9d31c03b8927b
msgid "What can be confusing here is that internally those two formats decode into the same IEEE-754 representation. And more importantly, it will decode into a fairly close representation when passed through all major parsers that we know about."
msgstr ""

#: ../../src/api/basics.rst:362
# b12f3252990141e6aad7d699eb2f1633
msgid "While we've only been discussing cases where the textual representation changes, another important case is when an input value contains more precision than can actually represented in a double. (You could argue that this case is actually \"losing\" data if you don't accept that numbers are stored in doubles)."
msgstr ""

#: ../../src/api/basics.rst:368
# 91e6098dda074164834f54791576eca1
msgid "Here's a log for a couple of the more common JSON libraries that happen to be on the author's machine:"
msgstr ""

#: ../../src/api/basics.rst:371
# 56838b5056f845948353e07783834790
msgid "Spidermonkey::"
msgstr ""

#: ../../src/api/basics.rst:382
# d8aaf609c2e344c8a1d8b2f281ee7b6d
msgid "Node::"
msgstr ""

#: ../../src/api/basics.rst:394
# 27740daf940f4e9e87e1abacec9b318b
msgid "Python::"
msgstr ""

#: ../../src/api/basics.rst:407
# 3319726e80304548ae601b72af9d63c2
msgid "Ruby::"
msgstr ""

#: ../../src/api/basics.rst:421
# d134f69e72ad426894220913104df52e
msgid "A small aside on Ruby, it requires a top level object or array, so I just wrapped the value. Should be obvious it doesn't affect the result of parsing the number though."
msgstr ""

#: ../../src/api/basics.rst:426
# 91155a8e642b425ba079bcb67756629c
msgid "Ejson (CouchDB's current parser) at CouchDB sha 168a663b::"
msgstr ""

#: ../../src/api/basics.rst:441
# 8be6cdd2b4d5464e96aa6908df7c5979
msgid "As you can see they all pretty much behave the same except for Ruby actually does appear to be losing some precision over the other libraries."
msgstr ""

#: ../../src/api/basics.rst:445
# 386964d1979e4fba959bc599a49ffb9e
msgid "The astute observer will notice that ejson (the CouchDB JSON library) reported an extra three digits. While its tempting to think that this is due to some internal difference, its just a more specific case of the 1.1 input as described above."
msgstr ""

#: ../../src/api/basics.rst:450
# 7a1d6123a99b4ea6a927f165241df207
msgid "The important point to realize here is that a double can only hold a finite number of values. What we're doing here is generating a string that when passed through the \"standard\" floating point parsing algorithms (ie, ``strtod``) will result in the same bit pattern in memory as we started with. Or, slightly different, the bytes in a JSON serialized number are chosen such that they refer to a single specific value that a double can represent."
msgstr ""

#: ../../src/api/basics.rst:458
# 0229553b436d4017b96630d3f82d9124
msgid "The important point to understand is that we're mapping from one infinite set onto a finite set. An easy way to see this is by reflecting on this::"
msgstr ""

#: ../../src/api/basics.rst:464
# 1fedb51febb64bf8839fa3b450cba266
msgid "Obviously a computer can't hold infinite bytes so we have to decimate our infinitely sized set to a finite set that can be represented concisely."
msgstr ""

#: ../../src/api/basics.rst:468
# bbaca368a69d45de9b71d018cb17d50f
msgid "The game that other JSON libraries are playing is merely:"
msgstr ""

#: ../../src/api/basics.rst:470
# 9395184e034240c6b32daa362820c74c
msgid "\"How few characters do I have to use to select this specific value for a double\""
msgstr ""

#: ../../src/api/basics.rst:472
# ab42891f1225409bb1d2ff0818dab2e3
msgid "And that game has lots and lots of subtle details that are difficult to duplicate in C without a significant amount of effort (it took Python over a year to get it sorted with their fancy build systems that automatically run on a number of different architectures)."
msgstr ""

#: ../../src/api/basics.rst:477
# 4c9a95346e124926a4e07ae09dd4f5d6
msgid "Hopefully we've shown that CouchDB is not doing anything \"funky\" by changing input. Its behaving the same as any other common JSON library does, its just not pretty printing its output."
msgstr ""

#: ../../src/api/basics.rst:481
# 13238fd7dfa34a8a95cfcf004cb248a1
msgid "On the other hand, if you actually are in a position where an IEEE-754 double is not a satisfactory datatype for your numbers, then the answer as has been stated is to not pass your numbers through this representation. In JSON this is accomplished by encoding them as a string or by using integer types (although integer types can still bite you if you use a platform that has a different integer representation than normal, ie, JavaScript)."
msgstr ""

#: ../../src/api/basics.rst:489
# 6c5c69c9ae4b4fc1a8e94cdb7de7a1b4
msgid "Further information can be found easily, including the `Floating Point Guide`_, and  `David Goldberg's Reference`_."
msgstr ""

#: ../../src/api/basics.rst:495
# a49f49b3e5ed4f548a99e95db894e914
msgid "Also, if anyone is really interested in changing this behavior, we're all ears for contributions to `jiffy`_ (which is theoretically going to replace ejson when we get around to updating the build system). The places we've looked for inspiration are TCL and Python. If you know a decent implementation of this float printing algorithm give us a holler."
msgstr ""

#: ../../src/api/basics.rst:507
# 73b51b95b1c24ab59978ddd9000ffa41
msgid "HTTP Status Codes"
msgstr ""

#: ../../src/api/basics.rst:509
# ef922510df4847d7941adab04e211e8a
msgid "With the interface to CouchDB working through HTTP, error codes and statuses are reported using a combination of the HTTP status code number, and corresponding data in the body of the response data."
msgstr ""

#: ../../src/api/basics.rst:513
# 738f7aa531974d6b8a3cf8783c59db37
msgid "A list of the error codes returned by CouchDB, and generic descriptions of the related errors are provided below. The meaning of different status codes for specific request types are provided in the corresponding API call reference."
msgstr ""

#: ../../src/api/basics.rst:518
# e33b5632fb9f49fcab1a89778e9d6cd3
msgid "``200 - OK``"
msgstr ""

#: ../../src/api/basics.rst:520
# e5ed7eccb6ea4eaaa3ba2fc91d53944f
msgid "Request completed successfully."
msgstr ""

#: ../../src/api/basics.rst:522
# 981a4e6523fc429f8fe88ead3ba9074f
msgid "``201 - Created``"
msgstr ""

#: ../../src/api/basics.rst:524
# 36b13826523349328e9f173ef2e331f8
msgid "Document created successfully."
msgstr ""

#: ../../src/api/basics.rst:526
# 51260e9013384aaeb5e0c1af496b513b
msgid "``202 - Accepted``"
msgstr ""

#: ../../src/api/basics.rst:528
# bf0d91ffcab8469dbca113a4efada6bb
msgid "Request has been accepted, but the corresponding operation may not have completed. This is used for background operations, such as database compaction."
msgstr ""

#: ../../src/api/basics.rst:532
# b9d336a3076942ac9586d31acb58d464
msgid "``304 - Not Modified``"
msgstr ""

#: ../../src/api/basics.rst:534
# 263bf9f1e0bc41b0aaa0346eeb1f46ca
msgid "The additional content requested has not been modified. This is used with the ETag system to identify the version of information returned."
msgstr ""

#: ../../src/api/basics.rst:537
# b972fdfcc89245e0ba8e53ecde3c29b5
msgid "``400 - Bad Request``"
msgstr ""

#: ../../src/api/basics.rst:539
# b35358b228f4473cb3c89e74a33f7bec
msgid "Bad request structure. The error can indicate an error with the request URL, path or headers. Differences in the supplied MD5 hash and content also trigger this error, as this may indicate message corruption."
msgstr ""

#: ../../src/api/basics.rst:544
# cdb870c47e51463cb96b6671cfbe1a79
msgid "``401 - Unauthorized``"
msgstr ""

#: ../../src/api/basics.rst:546
# d1dbbdaa1c1f40eda21a0b4ecd2b2c06
msgid "The item requested was not available using the supplied authorization, or authorization was not supplied."
msgstr ""

#: ../../src/api/basics.rst:549
# a4bcb97b5551404bba4ac0186c7a48f1
msgid "``403 - Forbidden``"
msgstr ""

#: ../../src/api/basics.rst:551
# 8751edfd97d549409dbaca945cc2bdd1
msgid "The requested item or operation is forbidden."
msgstr ""

#: ../../src/api/basics.rst:553
# 08b2875686d74005bdb7dec6cafc20bc
msgid "``404 - Not Found``"
msgstr ""

#: ../../src/api/basics.rst:555
# 809e5c3ef60b44fd88e9b656cb8fc5a7
msgid "The requested content could not be found. The content will include further information, as a JSON object, if available. The structure will contain two keys, ``error`` and ``reason``. For example:"
msgstr ""

#: ../../src/api/basics.rst:563
# d2a8caa74ead48ceb8695d6484c214b4
msgid "``405 - Resource Not Allowed``"
msgstr ""

#: ../../src/api/basics.rst:565
# d89d68c19cb044b7a50c6cd86546deeb
msgid "A request was made using an invalid HTTP request type for the URL requested. For example, you have requested a ``PUT`` when a ``POST`` is required. Errors of this type can also triggered by invalid URL strings."
msgstr ""

#: ../../src/api/basics.rst:570
# 54c9781a0009458ebcadf7eb17129e0c
msgid "``406 - Not Acceptable``"
msgstr ""

#: ../../src/api/basics.rst:572
# d97634e9cb754587b9af59e2c2bb48af
msgid "The requested content type is not supported by the server."
msgstr ""

#: ../../src/api/basics.rst:574
# c5e7fa90ffce47ccb99f1a7fe8649bb6
msgid "``409 - Conflict``"
msgstr ""

#: ../../src/api/basics.rst:576
# f252c95a659d438b978fa80a57cc3109
msgid "Request resulted in an update conflict."
msgstr ""

#: ../../src/api/basics.rst:578
# c48c2e5164ec42ff8461e5ebc7cc5631
msgid "``412 - Precondition Failed``"
msgstr ""

#: ../../src/api/basics.rst:580
# d422c3a6e809400fb2af296335fffa10
msgid "The request headers from the client and the capabilities of the server do not match."
msgstr ""

#: ../../src/api/basics.rst:583
# 526e7615ca1140529573e143e73e96e6
msgid "``415 - Bad Content Type``"
msgstr ""

#: ../../src/api/basics.rst:585
# ebc4bc562ac949f69491491022876565
msgid "The content types supported, and the content type of the information being requested or submitted indicate that the content type is not supported."
msgstr ""

#: ../../src/api/basics.rst:589
# 37da5c2b12c047bfb6776cc86338b41e
msgid "``416 - Requested Range Not Satisfiable``"
msgstr ""

#: ../../src/api/basics.rst:591
# aa5607b62aad4e958793c0cd3a16fe20
msgid "The range specified in the request header cannot be satisfied by the server."
msgstr ""

#: ../../src/api/basics.rst:594
# e9f16c644cfc4559b30806e62afd90b1
msgid "``417 - Expectation Failed``"
msgstr ""

#: ../../src/api/basics.rst:596
# 99a40394903f42d0af1c320ca668f543
msgid "When sending documents in bulk, the bulk load operation failed."
msgstr ""

#: ../../src/api/basics.rst:598
# be89775646dd496c8833b3dbe3de6690
msgid "``500 - Internal Server Error``"
msgstr ""

#: ../../src/api/basics.rst:600
# bc21e8bcaa3e495ca12596070f380146
msgid "The request was invalid, either because the supplied JSON was invalid, or invalid information was supplied as part of the request."
msgstr ""

