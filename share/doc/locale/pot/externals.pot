# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2013, The Apache Software Foundation
# This file is distributed under the same license as the Apache CouchDB package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Apache CouchDB 1.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-21 23:32\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../src/externals.rst:18
# 04c03797c3904e48ba1b7fe3ad0dc941
msgid "CouchDB Externals API"
msgstr ""

#: ../../src/externals.rst:20
# 81a09bd04e95483fb9dbd598cf454cbf
msgid "Paul Joseph Davis"
msgstr ""

#: ../../src/externals.rst:21
# 43706ae045c84aafa674bbff622061a2
msgid "2010-09-26"
msgstr ""

#: ../../src/externals.rst:22
# 00cac78cecae48f9a220fffed5b0b1f3
msgid "http://davispj.com/2010/09/26/new-couchdb-externals-api.html"
msgstr ""

#: ../../src/externals.rst:24
# eeac14675fcc4c09808b372cd48cdaf7
msgid "For a bit of background, CouchDB has had an API for managing `external OS processes`_ that are capable of handling HTTP requests for a given URL prefix. These OS processes communicate with CouchDB using JSON over stdio. They're dead simple to write and provide CouchDB users an easy way to extend CouchDB functionality."
msgstr ""

#: ../../src/externals.rst:30
# 6868b947a7fa475ea2da2e11b952e364
msgid "Even though they're dead simple to write, there are a few issues. The implementation in CouchDB does not provide fancy pooling semantics. The current API is explicitly synchronous which prevents people from writing event driven code in an external handler. In the end, they may be simple, but their simplicity is also quite limiting."
msgstr ""

#: ../../src/externals.rst:36
# fafae0af65ca47048c73ba22f18d1a22
msgid "During CouchCamp a few weeks ago I had multiple discussions with various people that wanted to see the _externals API modified in slight ways that weren't mutually compatible. After having multiple discussions with multiple people we formed a general consensus on what a new API could look like."
msgstr ""

#: ../../src/externals.rst:42
# 28dbde473cfe499593b538eb73d9ec98
msgid "The New Hotness"
msgstr ""

#: ../../src/externals.rst:44
# 8a0daa115f264bacb715a00389a8f09d
msgid "So the first idea for improving the _external API was to make CouchDB act as a reverse proxy. This would allow people to write an HTTP server that was as simple or as complicated as they wanted. It will allow people to change their networking configuration more easily and also allow for external processes to be hosted on nodes other than the one running CouchDB. Bottom line, it not only allows us to have similar semantics as _externals, it provides a lot more fringe benefits as well. I'm always a fan of extra awesomeness."
msgstr ""

#: ../../src/externals.rst:52
# 911ea489825e4923b846b726518f8a6e
msgid "After hitting on the idea of adding a reverse proxy, people quickly pointed out that it would require users to start manually managing their external processes using something like `Runit`_ or `Supervisord`_. After some more discussions I ran into people that wanted something like _externals that didn't handle HTTP requests. After that it was easy to see that adding a second feature that managed OS processes was the way to go."
msgstr ""

#: ../../src/externals.rst:59
# cc02d1c970a2441282b32d4a2e1a5f9b
msgid "I spent this weekend implementing both of these features. Both are at the stage of working but requiring more testing. In the case of the HTTP proxy I have no tests because I can't decide how to test the thing. If you have ideas, I'd sure like to hear them."
msgstr ""

#: ../../src/externals.rst:64
# 53abc4728b824a34b6ca6dd40016d9dd
msgid "**[Update]**: I woke up the other morning realizing that I was being an idiot and that Erlang is awesome. There's no reason that I can't have an HTTP client, proxy, and server all hosted in the same process. So that's what I did. It turns out to be a fairly nice way of configuring matching assertions between the client and the server to test the proxy transmissions."
msgstr ""

#: ../../src/externals.rst:71
# bcbbb022a2484a2c94a2336c03e0ec19
msgid "How does it work? - HTTP Proxying"
msgstr ""

#: ../../src/externals.rst:73
# 4491fb86b7ab49479c2845b6ed5e7ccf
msgid "To configure a :ref:`proxy handler <config/proxy>`, edit your `local.ini` and add a section like such::"
msgstr ""

#: ../../src/externals.rst:79
# 3c0bbb1eb7a545c7b0b57139b0724ade
msgid "This would be approximately what you'd need to do to get `CouchDB-Lucene`_ handled through this interface. The URL you use to access a query would be:"
msgstr ""

#: ../../src/externals.rst:82
# 221c96d816894328a57f7388235afe27
msgid "http://127.0.0.1:5984/_fti/db_name/_design/foo/by_content?q=hello"
msgstr ""

#: ../../src/externals.rst:84
# 317884afb3c741c4a452646100a6be6a
msgid "A couple things to note here. Anything in the path after the configured proxy name (\"_fti\" in this case) will be appended to the configured destination URL (\"http://127.0.0.1:5985\" in this case). The query string and any associated body will also be proxied transparently."
msgstr ""

#: ../../src/externals.rst:89
# 4d6cbef00dd647bba40997a0c19e678b
msgid "Also, of note is that there's nothing that limits on what resources can be proxied. You're free to choose any destination that the CouchDB node is capable of communicating with."
msgstr ""

#: ../../src/externals.rst:94
# a5ed7854c9c84c3a920d087d361cfe3b
msgid "How does it work? - OS Daemons"
msgstr ""

#: ../../src/externals.rst:96
# 1b1cb995d3ff4e4a8336173efde0e3b1
msgid "The second part of the new API gives CouchDB simple OS process management. When CouchDB boots it will start each configured OS daemon. If one of these daemons fails at some point, it will be restarted. If one of these daemons fails too often, CouchDB will stop attempting to start it."
msgstr ""

#: ../../src/externals.rst:101
# bf9c2d7433a549f3ac89977f314e3eaa
msgid "OS daemons are one-to-one. For each daemon, CouchDB will make sure that exactly one instance of it is alive. If you have something where you want multiple processes, you need to either tell CouchDB about each one, or have a main process that forks off the required sub-processes."
msgstr ""

#: ../../src/externals.rst:106
# aa9b9c33d2c74701a6cfc7df899985b4
msgid "To configure an :config:section:`OS daemon <os_daemons>`, add this to your `local.ini`::"
msgstr ""

#: ../../src/externals.rst:113
# d80b7cb5af2043ea82934409c627dcc2
msgid "Configuration API"
msgstr ""

#: ../../src/externals.rst:115
# 2ded2d00f4bc4353a2bb28e881bc2d7c
msgid "As an added benefit, because stdio is now free, I implemented a simple API that OS daemons can use to read the configuration of their CouchDB host. This way you can have them store their configuration inside CouchDB's config system if you desire. Or they can peek at things like the :config:option:`httpd/bind_address` and :config:option:`httpd/port` that CouchDB is using."
msgstr ""

#: ../../src/externals.rst:122
# 2ddc548cdecf4948842a50e508d623dd
msgid "A request for a config section looks like this::"
msgstr ""

#: ../../src/externals.rst:126
#: ../../src/externals.rst:134
# 7b16536893914bb8931cffe808e8693a
# 61f074d7e9cd4131b627263224d1be7f
msgid "And the response::"
msgstr ""

#: ../../src/externals.rst:130
# 2f5b0d3c89024bce903bf2366cfdb563
msgid "Or to get a specific key::"
msgstr ""

#: ../../src/externals.rst:138
# ef5166db03c54367a1ec12c339e3596d
msgid "All requests and responses are terminated with a newline (indicated by ``\\n``)."
msgstr ""

#: ../../src/externals.rst:141
# 8c74db61eafb448b97cd943bcbd8a2b0
msgid "Logging API"
msgstr ""

#: ../../src/externals.rst:143
# a2f3595b5bae444da73fb80a2542f2d2
msgid "There's also an API for adding messages to CouchDB's logs. Its simply::"
msgstr ""

#: ../../src/externals.rst:147
# 451264ab75f14384a83aa9133978584e
msgid "Where ``$MESG`` is any arbitrary JSON. There is no response from this command. As with the config API, the trailing ``\\n`` represents a newline byte."
msgstr ""

#: ../../src/externals.rst:151
# e712035851214d8db0c14f25cf2ea4c8
msgid "Dynamic Daemons"
msgstr ""

#: ../../src/externals.rst:153
# 669fff6da8274d778a16d11cd4729a52
msgid "The OS daemons react in real time to changes to the configuration system. If you set or delete keys in the :config:section:`os_daemons` section, the corresponding daemons will be started or killed as appropriate."
msgstr ""

#: ../../src/externals.rst:158
# 7e58f0ed91584a0980758ae828e2c410
msgid "Neat. But So What?"
msgstr ""

#: ../../src/externals.rst:160
# 74da19ce49854b4895f066e17c13e9bc
msgid "It was suggested that a good first demo would be a `Node.js`_ handler. So, I present to you a \"Hello, World\" Node.js handler. Also, remember that this currently relies on code in my fork on `GitHub`_."
msgstr ""

#: ../../src/externals.rst:164
# 0dcacbbe300d4e1d9d2116a3895e4662
msgid "File `node-hello-world.js`:"
msgstr ""

#: ../../src/externals.rst:207
# ae3a5f73315e443fa5d89a2b8e073f97
msgid "File `local.ini` (Just add these to what you have):"
msgstr ""

#: ../../src/externals.rst:223
# 317684f8bcf14e4a84f2df1cc0e09662
msgid "And then start CouchDB and try:"
msgstr ""

#: ../../src/externals.rst:247
# 88e0be46172c4a38b1c5d471eff89558
msgid "The corresponding CouchDB logs look like::"
msgstr ""

