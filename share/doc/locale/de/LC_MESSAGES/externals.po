# 
msgid ""
msgstr ""
"Project-Id-Version: Apache CouchDB 1.5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-10-21 22:51\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../src/externals.rst:18
msgid "CouchDB Externals API"
msgstr ""

#: ../../src/externals.rst:20
msgid "Paul Joseph Davis"
msgstr ""

#: ../../src/externals.rst:21
msgid "2010-09-26"
msgstr ""

#: ../../src/externals.rst:22
msgid "http://davispj.com/2010/09/26/new-couchdb-externals-api.html"
msgstr ""

#: ../../src/externals.rst:24
msgid ""
"For a bit of background, CouchDB has had an API for managing `external OS "
"processes`_ that are capable of handling HTTP requests for a given URL "
"prefix. These OS processes communicate with CouchDB using JSON over stdio. "
"They're dead simple to write and provide CouchDB users an easy way to extend"
" CouchDB functionality."
msgstr ""

#: ../../src/externals.rst:30
msgid ""
"Even though they're dead simple to write, there are a few issues. The "
"implementation in CouchDB does not provide fancy pooling semantics. The "
"current API is explicitly synchronous which prevents people from writing "
"event driven code in an external handler. In the end, they may be simple, "
"but their simplicity is also quite limiting."
msgstr ""

#: ../../src/externals.rst:36
msgid ""
"During CouchCamp a few weeks ago I had multiple discussions with various "
"people that wanted to see the _externals API modified in slight ways that "
"weren't mutually compatible. After having multiple discussions with multiple"
" people we formed a general consensus on what a new API could look like."
msgstr ""

#: ../../src/externals.rst:42
msgid "The New Hotness"
msgstr ""

#: ../../src/externals.rst:44
msgid ""
"So the first idea for improving the _external API was to make CouchDB act as"
" a reverse proxy. This would allow people to write an HTTP server that was "
"as simple or as complicated as they wanted. It will allow people to change "
"their networking configuration more easily and also allow for external "
"processes to be hosted on nodes other than the one running CouchDB. Bottom "
"line, it not only allows us to have similar semantics as _externals, it "
"provides a lot more fringe benefits as well. I'm always a fan of extra "
"awesomeness."
msgstr ""

#: ../../src/externals.rst:52
msgid ""
"After hitting on the idea of adding a reverse proxy, people quickly pointed "
"out that it would require users to start manually managing their external "
"processes using something like `Runit`_ or `Supervisord`_. After some more "
"discussions I ran into people that wanted something like _externals that "
"didn't handle HTTP requests. After that it was easy to see that adding a "
"second feature that managed OS processes was the way to go."
msgstr ""

#: ../../src/externals.rst:59
msgid ""
"I spent this weekend implementing both of these features. Both are at the "
"stage of working but requiring more testing. In the case of the HTTP proxy I"
" have no tests because I can't decide how to test the thing. If you have "
"ideas, I'd sure like to hear them."
msgstr ""

#: ../../src/externals.rst:64
msgid ""
"**[Update]**: I woke up the other morning realizing that I was being an "
"idiot and that Erlang is awesome. There's no reason that I can't have an "
"HTTP client, proxy, and server all hosted in the same process. So that's "
"what I did. It turns out to be a fairly nice way of configuring matching "
"assertions between the client and the server to test the proxy "
"transmissions."
msgstr ""

#: ../../src/externals.rst:71
msgid "How does it work? - HTTP Proxying"
msgstr ""

#: ../../src/externals.rst:73
msgid ""
"To configure a :ref:`proxy handler <config/proxy>`, edit your `local.ini` "
"and add a section like such::"
msgstr ""

#: ../../src/externals.rst:79
msgid ""
"This would be approximately what you'd need to do to get `CouchDB-Lucene`_ "
"handled through this interface. The URL you use to access a query would be:"
msgstr ""

#: ../../src/externals.rst:82
msgid "http://127.0.0.1:5984/_fti/db_name/_design/foo/by_content?q=hello"
msgstr ""

#: ../../src/externals.rst:84
msgid ""
"A couple things to note here. Anything in the path after the configured "
"proxy name (\"_fti\" in this case) will be appended to the configured "
"destination URL (\"http://127.0.0.1:5985\" in this case). The query string "
"and any associated body will also be proxied transparently."
msgstr ""

#: ../../src/externals.rst:89
msgid ""
"Also, of note is that there's nothing that limits on what resources can be "
"proxied. You're free to choose any destination that the CouchDB node is "
"capable of communicating with."
msgstr ""

#: ../../src/externals.rst:94
msgid "How does it work? - OS Daemons"
msgstr ""

#: ../../src/externals.rst:96
msgid ""
"The second part of the new API gives CouchDB simple OS process management. "
"When CouchDB boots it will start each configured OS daemon. If one of these "
"daemons fails at some point, it will be restarted. If one of these daemons "
"fails too often, CouchDB will stop attempting to start it."
msgstr ""

#: ../../src/externals.rst:101
msgid ""
"OS daemons are one-to-one. For each daemon, CouchDB will make sure that "
"exactly one instance of it is alive. If you have something where you want "
"multiple processes, you need to either tell CouchDB about each one, or have "
"a main process that forks off the required sub-processes."
msgstr ""

#: ../../src/externals.rst:106
msgid ""
"To configure an :config:section:`OS daemon <os_daemons>`, add this to your "
"`local.ini`::"
msgstr ""

#: ../../src/externals.rst:113
msgid "Configuration API"
msgstr ""

#: ../../src/externals.rst:115
msgid ""
"As an added benefit, because stdio is now free, I implemented a simple API "
"that OS daemons can use to read the configuration of their CouchDB host. "
"This way you can have them store their configuration inside CouchDB's config"
" system if you desire. Or they can peek at things like the "
":config:option:`httpd/bind_address` and :config:option:`httpd/port` that "
"CouchDB is using."
msgstr ""

#: ../../src/externals.rst:122
msgid "A request for a config section looks like this::"
msgstr ""

#: ../../src/externals.rst:126 ../../src/externals.rst:134
msgid "And the response::"
msgstr ""

#: ../../src/externals.rst:130
msgid "Or to get a specific key::"
msgstr ""

#: ../../src/externals.rst:138
msgid ""
"All requests and responses are terminated with a newline (indicated by "
"``\\n``)."
msgstr ""

#: ../../src/externals.rst:141
msgid "Logging API"
msgstr ""

#: ../../src/externals.rst:143
msgid ""
"There's also an API for adding messages to CouchDB's logs. Its simply::"
msgstr ""

#: ../../src/externals.rst:147
msgid ""
"Where ``$MESG`` is any arbitrary JSON. There is no response from this "
"command. As with the config API, the trailing ``\\n`` represents a newline "
"byte."
msgstr ""

#: ../../src/externals.rst:151
msgid "Dynamic Daemons"
msgstr ""

#: ../../src/externals.rst:153
msgid ""
"The OS daemons react in real time to changes to the configuration system. If"
" you set or delete keys in the :config:section:`os_daemons` section, the "
"corresponding daemons will be started or killed as appropriate."
msgstr ""

#: ../../src/externals.rst:158
msgid "Neat. But So What?"
msgstr ""

#: ../../src/externals.rst:160
msgid ""
"It was suggested that a good first demo would be a `Node.js`_ handler. So, I"
" present to you a \"Hello, World\" Node.js handler. Also, remember that this"
" currently relies on code in my fork on `GitHub`_."
msgstr ""

#: ../../src/externals.rst:164
msgid "File `node-hello-world.js`:"
msgstr ""

#: ../../src/externals.rst:207
msgid "File `local.ini` (Just add these to what you have):"
msgstr ""

#: ../../src/externals.rst:223
msgid "And then start CouchDB and try:"
msgstr ""

#: ../../src/externals.rst:247
msgid "The corresponding CouchDB logs look like::"
msgstr ""
